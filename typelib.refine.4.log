{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [#{[{user_type,0,af_constraint,[]}] =>
                           [{user_type,0,af_constraint,[]}],
                       [{user_type,0,binary_op,[]}] =>
                           [{user_type,0,binary_op,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}],
                       [{user_type,0,unary_op,[]}] =>
                           [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_constraint()}","{af_constraint()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
                       [{user_type,0,binary_op,[]}] =>
                           [{user_type,0,binary_op,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}],
                       [{user_type,0,unary_op,[]}] =>
                           [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type()}",
                     "{{type, anno(), constraint, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["type()","{type, anno(), constraint, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["user_type","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
                       [{user_type,0,binary_op,[]}] =>
                           [{user_type,0,binary_op,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}],
                       [{user_type,0,unary_op,[]}] =>
                           [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,["{type()}","{{atom, anno(), atom()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["char","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,["af_atom()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_singleton_integer_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_variable,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_user_defined_type()}",
                     "{{integer, anno(), non_neg_integer()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_user_defined_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{integer, anno(), non_neg_integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{integer, anno(), non_neg_integer()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{integer, anno(), non_neg_integer()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","integer",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["integer()","non_neg_integer()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,neg_integer,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{atom,0,integer},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],anno,[]},
              {type,0,neg_integer,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer()","{integer, anno(), non_neg_integer()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","integer",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["non_neg_integer()","non_neg_integer()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{integer, anno(), non_neg_integer()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["char","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{type,0,tuple,
                    [{atom,0,integer},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                anno,[]},
                     {type,0,neg_integer,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{integer, anno(), non_neg_integer()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{integer, anno(), non_neg_integer()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{integer, anno(), non_neg_integer()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{type,0,tuple,
                    [{atom,0,integer},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                anno,[]},
                     {type,0,neg_integer,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{type,0,tuple,
                  [{atom,0,integer},
                   {user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       anno,[]},
                   {type,0,neg_integer,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_character,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_variable,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_character() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{char, anno(), char()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_character() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{char, anno(), char()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{char, anno(), char()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{type,0,tuple,
                    [{atom,0,integer},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                anno,[]},
                     {type,0,neg_integer,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{type,0,tuple,
                  [{atom,0,integer},
                   {user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       anno,[]},
                   {type,0,neg_integer,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_variable,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{var, anno(), gr_type_var()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","var",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","var",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","var",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{type,0,tuple,
                    [{atom,0,integer},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                anno,[]},
                     {type,0,neg_integer,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{type,0,tuple,
                  [{atom,0,integer},
                   {user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       anno,[]},
                   {type,0,neg_integer,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{user_type, anno(), type_name(), [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{type,0,tuple,
                    [{atom,0,integer},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                anno,[]},
                     {type,0,neg_integer,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{type,0,tuple,
                  [{atom,0,integer},
                   {user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       anno,[]},
                   {type,0,neg_integer,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type,\n            anno(),\n            record,\n            [{atom, anno(), atom()} |\n             {type,\n              anno(),\n              field_type,\n              [{atom, anno(), atom()} |\n               af_annotated_type() |\n               af_atom() |\n               af_bitstring_type() |\n               af_constrained_function_type() |\n               af_empty_list_type() |\n               af_fun_type() |\n               af_integer_range_type() |\n               af_map_type() |\n               af_predefined_type() |\n               af_record_type() |\n               af_remote_type() |\n               af_singleton_integer_type() |\n               af_tuple_type() |\n               af_type_union() |\n               af_type_variable() |\n               af_user_defined_type()]},\n             ...]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","record",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["[af_atom() | af_record_field_type()]",
                     "[{atom, anno(), atom()} |\n           {type,\n            anno(),\n            field_type,\n            [{atom, anno(), atom()} |\n             af_annotated_type() |\n             af_atom() |\n             af_bitstring_type() |\n             af_constrained_function_type() |\n             af_empty_list_type() |\n             af_fun_type() |\n             af_integer_range_type() |\n             af_map_type() |\n             af_predefined_type() |\n             af_record_type() |\n             af_remote_type() |\n             af_singleton_integer_type() |\n             af_tuple_type() |\n             af_type_union() |\n             af_type_variable() |\n             af_user_defined_type()]},\n           ...]",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_atom() | af_record_field_type()",
                     "{atom, anno(), atom()} |\n          {type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_field_type()",
                     "{atom, anno(), atom()} |\n          {type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), field_type, [af_atom() | abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-7-',4}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), field_type, [af_atom() | abstract_type()]}",
                     "{type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["field_type","field_type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["[af_atom() | abstract_type()]",
                     "[{atom, anno(), atom()} |\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_user_defined_type()]",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-7-',4}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), field_type, none()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), tuple, any}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","tuple",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["[abstract_type()]","any",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{atom,0,type},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],anno,[]},
              {atom,0,tuple},
              {type,0,list,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                abstract_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map, any}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{type, anno(), map, any}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), map, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{A_typechecker_3529_22}",
                     "{{type, A_typechecker_3529_22_typechecker_1257_27, any}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["A_typechecker_3529_22",
                     "{type, A_typechecker_3529_22_typechecker_1257_27, any}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["A_typechecker_3529_22","[any()]",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{A_typechecker_3529_22}","{A_typechecker_3529_22}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{none()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "none()",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map_field_exact, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map_field_assoc, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{remote_type,\n            anno(),\n            [af_atom() | af_atom() | [abstract_type()]]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","remote_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","remote_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{type,0,tuple,
                    [{atom,0,integer},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                anno,[]},
                     {type,0,neg_integer,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{type,0,tuple,
                  [{atom,0,integer},
                   {user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       anno,[]},
                   {type,0,neg_integer,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{{integer, anno(), neg_integer()} |\n           af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{ann_type, anno(), [af_anno() | abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()} |\n          af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{integer, anno(), neg_integer()}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","ann_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{type,0,tuple,
                    [{atom,0,integer},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                anno,[]},
                     {type,0,neg_integer,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{type,0,tuple,
                  [{atom,0,integer},
                   {user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       anno,[]},
                   {type,0,neg_integer,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,binary_op,[]}] => [{user_type,0,binary_op,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{type,0,tuple,
                         [{atom,0,integer},
                          {user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              anno,[]},
                          {type,0,neg_integer,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}],
           [{user_type,0,unary_op,[]}] => [{user_type,0,unary_op,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.96.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {166,1},
    remove_pos_constraint,1,
    [{clause,
      {166,1},
      [{tuple,
        {166,23},
        [{atom,{166,24},type},
         {var,{166,30},'_'},
         {atom,{166,33},constraint},
         {cons,
          {166,45},
          {tuple,
           {166,46},
           [{atom,{166,47},atom},
            {var,{166,53},'_'},
            {atom,{166,56},is_subtype}]},
          {cons,{166,69},{var,{166,69},'Args'},{nil,{166,73}}}}]}],
      [],
      [{match,
        {167,5},
        {var,{167,5},'L'},
        {call,
         {167,9},
         {remote,{167,17},{atom,{167,9},erl_anno},{atom,{167,18},new}},
         [{integer,{167,22},0}]}},
       {tuple,
        {168,5},
        [{atom,{168,6},type},
         {var,{168,12},'L'},
         {atom,{168,15},constraint},
         {cons,
          {168,27},
          {tuple,
           {168,28},
           [{atom,{168,29},atom},
            {var,{168,35},'L'},
            {atom,{168,38},is_subtype}]},
          {cons,
           {168,51},
           {call,
            {168,51},
            {remote,{168,56},{atom,{168,51},lists},{atom,{168,57},map}},
            [{'fun',{168,61},{function,remove_pos,1}},{var,{168,79},'Args'}]},
           {nil,{168,84}}}}]}]}]}]}}
{trace,<0.96.0>,call,{typechecker,refine,["{any()}","{none()}",seen,env]}}
{trace,<0.96.0>,call,{typechecker,refine,["any()","none()",seen,env]}}
{trace,<0.96.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.96.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.96.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.96.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.97.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {171,1},
             remove_pos_all,1,
             [{clause,{171,1},[{nil,{171,16}}],[],[{nil,{172,5}}]},
              {clause,
                  {173,1},
                  [{match,
                       {173,16},
                       {cons,{173,16},{var,{173,17},'_'},{var,{173,19},'_'}},
                       {var,{173,24},'L'}}],
                  [],
                  [{call,
                       {174,5},
                       {remote,
                           {174,10},
                           {atom,{174,5},lists},
                           {atom,{174,11},map}},
                       [{'fun',{174,15},{function,remove_pos,1}},
                        {var,{174,33},'L'}]}]}]}]}}
{trace,<0.97.0>,call,{typechecker,refine,["{list()}","{[]}",seen,env]}}
{trace,<0.97.0>,call,{typechecker,refine,["list()","[]",seen,env]}}
{trace,<0.97.0>,return_from,
       {typechecker,refine,4},
       {type,0,nonempty_list,[{type,0,any,[]}]}}
{trace,<0.97.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.97.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,[{type,0,nonempty_list,[{type,0,any,[]}]}]}}
{trace,<0.97.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.97.0>,call,
       {typechecker,refine,["{[any(), ...]}","{[any(), ...]}",seen,env]}}
{trace,<0.97.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.97.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.97.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.98.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {176,1},
             remove_pos_remote_type,1,
             [{clause,
                  {176,1},
                  [{tuple,
                       {176,24},
                       [{atom,{176,25},remote_type},
                        {var,{176,38},'_'},
                        {cons,
                            {176,41},
                            {var,{176,42},'Mod'},
                            {cons,
                                {176,47},
                                {var,{176,47},'Name'},
                                {cons,
                                    {176,53},
                                    {var,{176,53},'Params'},
                                    {nil,{176,59}}}}}]}],
                  [],
                  [{match,
                       {177,5},
                       {var,{177,5},'Params1'},
                       {call,
                           {177,15},
                           {remote,
                               {177,20},
                               {atom,{177,15},lists},
                               {atom,{177,21},map}},
                           [{'fun',{177,25},{function,remove_pos,1}},
                            {var,{177,43},'Params'}]}},
                   {tuple,
                       {178,5},
                       [{atom,{178,6},remote_type},
                        {call,
                            {178,19},
                            {remote,
                                {178,27},
                                {atom,{178,19},erl_anno},
                                {atom,{178,28},new}},
                            [{integer,{178,32},0}]},
                        {cons,
                            {178,36},
                            {var,{178,37},'Mod'},
                            {cons,
                                {178,42},
                                {var,{178,42},'Name'},
                                {cons,
                                    {178,48},
                                    {var,{178,48},'Params1'},
                                    {nil,{178,55}}}}}]}]}]}]}}
{trace,<0.98.0>,call,{typechecker,refine,["{any()}","{none()}",seen,env]}}
{trace,<0.98.0>,call,{typechecker,refine,["any()","none()",seen,env]}}
{trace,<0.98.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.98.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.98.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.98.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.99.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {180,1},
             remove_pos_ann_type,1,
             [{clause,
                  {180,1},
                  [{tuple,
                       {180,21},
                       [{atom,{180,22},ann_type},
                        {var,{180,32},'_'},
                        {cons,
                            {180,35},
                            {var,{180,36},'_Var'},
                            {cons,
                                {180,42},
                                {var,{180,42},'Type'},
                                {nil,{180,46}}}}]}],
                  [],
                  [{call,
                       {182,5},
                       {atom,{182,5},remove_pos},
                       [{call,
                            {182,17},
                            {atom,{182,17},':::'},
                            [{var,{182,29},'Type'},
                             {string,{182,29},"type ( )"}]}]}]}]}]}}
{trace,<0.99.0>,call,{typechecker,refine,["{any()}","{none()}",seen,env]}}
{trace,<0.99.0>,call,{typechecker,refine,["any()","none()",seen,env]}}
{trace,<0.99.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.99.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.99.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.99.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.100.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {186,1},
             anno_keep_only_filename,1,
             [{clause,
                  {186,1},
                  [{var,{186,25},'Anno'}],
                  [],
                  [{match,
                       {187,5},
                       {var,{187,5},'NewAnno'},
                       {call,
                           {187,15},
                           {remote,
                               {187,23},
                               {atom,{187,15},erl_anno},
                               {atom,{187,24},new}},
                           [{integer,{187,28},0}]}},
                   {'case',
                       {188,5},
                       {call,
                           {188,10},
                           {remote,
                               {188,18},
                               {atom,{188,10},erl_anno},
                               {atom,{188,19},file}},
                           [{var,{188,24},'Anno'}]},
                       [{clause,
                            {189,9},
                            [{atom,{189,9},undefined}],
                            [],
                            [{var,{189,22},'NewAnno'}]},
                        {clause,
                            {190,9},
                            [{var,{190,9},'Filename'}],
                            [],
                            [{call,
                                 {190,22},
                                 {remote,
                                     {190,30},
                                     {atom,{190,22},erl_anno},
                                     {atom,{190,31},set_file}},
                                 [{var,{190,40},'Filename'},
                                  {var,{190,50},'NewAnno'}]}]}]}]}]}]}}
{trace,<0.100.0>,call,
       {typechecker,refine,
                    ["{filename() | undefined}","{undefined}",seen,env]}}
{trace,<0.100.0>,call,
       {typechecker,refine,["filename() | undefined","undefined",seen,env]}}
{trace,<0.100.0>,call,
       {typechecker,refine,["filename()","undefined",seen,env]}}
{trace,<0.100.0>,call,{typechecker,refine,["[char()]","undefined",seen,env]}}
{trace,<0.100.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.100.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.100.0>,call,{typechecker,refine,["<<_:_*8>>","undefined",seen,env]}}
{trace,<0.100.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.100.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.100.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"erl_anno.erl"},{location,0}],filename,[]}}
{trace,<0.100.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.100.0>,call,{typechecker,refine,["undefined","undefined",seen,env]}}
{trace,<0.100.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.100.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.100.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"erl_anno.erl"},{location,0}],filename,[]}}
{trace,<0.100.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.100.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{user_type,[{file,"erl_anno.erl"},{location,0}],filename,[]}]}}
{trace,<0.100.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.100.0>,call,
       {typechecker,refine,["{filename()}","{filename()}",seen,env]}}
{trace,<0.100.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.100.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.100.0>,call,
       {typechecker,refine,
                    ["{erl_anno:anno()}","{erl_anno:anno()}",seen,env]}}
{trace,<0.100.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.100.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.100.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.101.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {195,1},
             annotate_user_type,2,
             [{clause,
                  {195,1},
                  [{var,{195,20},'ModOrFile'},{var,{195,31},'Type'}],
                  [],
                  [{match,
                       {196,5},
                       {var,{196,5},'Filename'},
                       {call,
                           {196,16},
                           {atom,{196,16},ensure_filename},
                           [{var,{196,32},'ModOrFile'}]}},
                   {call,
                       {197,5},
                       {atom,{197,5},annotate_user_type_},
                       [{var,{197,25},'Filename'},
                        {var,{197,35},'Type'}]}]}]}]}}
{trace,<0.101.0>,call,
       {typechecker,refine,
                    ["{module() | file:filename(), type()}",
                     "{module() | file:filename(), type()}",seen,env]}}
{trace,<0.101.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.101.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.101.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.102.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {200,1},
    ensure_filename,1,
    [{clause,
      {200,1},
      [{var,{200,17},'ModOrFile'}],
      [],
      [{'case',
        {201,5},
        {var,{201,10},'ModOrFile'},
        [{clause,
          {202,9},
          [{var,{202,9},'Module'}],
          [[{call,
             {202,21},
             {atom,{202,21},is_atom},
             [{var,{202,29},'ModOrFile'}]}]],
          [{op,
            {203,56},
            '++',
            {call,
             {203,13},
             {atom,{203,13},atom_to_list},
             [{call,
               {203,27},
               {atom,{203,27},':::'},
               [{var,{203,39},'Module'},{string,{203,39},"atom ( )"}]}]},
            {string,{203,59},".erl"}}]},
         {clause,
          {204,9},
          [{var,{204,9},'_'}],
          [],
          [{var,{204,14},'ModOrFile'}]}]}]}]}]}}
{trace,<0.102.0>,call,
       {typechecker,refine,["atom() | [char()]","atom()",seen,env]}}
{trace,<0.102.0>,call,{typechecker,refine,["[char()]","atom()",seen,env]}}
{trace,<0.102.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.102.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.102.0>,call,{typechecker,refine,["atom()","atom()",seen,env]}}
{trace,<0.102.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.102.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.102.0>,return_from,
       {typechecker,refine,4},
       {type,0,list,[{type,0,char,[]}]}}
{trace,<0.102.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.102.0>,call,
       {typechecker,refine,
                    ["{atom() | [char()]}","{atom() | [char()]}",seen,env]}}
{trace,<0.102.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.102.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.102.0>,call,
       {typechecker,refine,
                    ["{module() | file:filename()}",
                     "{module() | file:filename()}",seen,env]}}
{trace,<0.102.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.102.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.102.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.103.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {211,1},
    annotate_user_types,2,
    [{clause,
      {211,1},
      [{var,{211,21},'ModOrFile'},{var,{211,32},'TypeOrTypes'}],
      [],
      [{'case',
        {212,5},
        {var,{212,10},'TypeOrTypes'},
        [{clause,
          {213,9},
          [{var,{213,9},'Types'}],
          [[{call,{213,20},{atom,{213,20},is_list},[{var,{213,28},'Types'}]}]],
          [{lc,
            {214,13},
            {call,
             {214,15},
             {atom,{214,15},annotate_user_type},
             [{var,{214,34},'ModOrFile'},{var,{214,45},'Type'}]},
            [{generate,
              {214,59},
              {var,{214,54},'Type'},
              {call,
               {214,63},
               {atom,{214,63},':::'},
               [{var,{214,75},'Types'},{string,{214,75},"[ type ( ) ]"}]}}]}]},
         {clause,
          {215,9},
          [{var,{215,9},'Type'}],
          [],
          [{call,
            {216,13},
            {atom,{216,13},annotate_user_type},
            [{var,{216,32},'ModOrFile'},
             {call,
              {216,44},
              {atom,{216,44},':::'},
              [{var,{216,56},'Type'},
               {string,{216,56},"type ( )"}]}]}]}]}]}]}]}}
{trace,<0.103.0>,call,
       {typechecker,refine,["[type()] | type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,{typechecker,refine,["type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_user_defined_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_type_variable()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_type_union()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_tuple_type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}","[any()]",
                     seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["{type, anno(), tuple, any}","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,
       {typechecker,refine,["gr_integer()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())","[any()]",
                     seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_integer()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_character()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())","[any()]",
                     seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_remote_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_record_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_predefined_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_map_type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}","[any()]",seen,
                     env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["{type, anno(), map, any}","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_integer_range_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_fun_type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_function_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["{type, anno(), 'fun', []}","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_empty_list_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_bitstring_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,{typechecker,refine,["af_atom()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_annotated_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{user_type,0,type,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,{typechecker,refine,["[type()]","[any()]",seen,env]}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{user_type,0,type,[]}}
{trace,<0.103.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.103.0>,call,{typechecker,refine,["{type()}","{type()}",seen,env]}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.103.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["{atom() | [char()], [type()] | type()}",
                     "{atom() | [char()], [type()] | type()}",seen,env]}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.103.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.103.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.104.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {220,1},
    annotate_user_type_,2,
    [{clause,
      {220,1},
      [{var,{220,21},'Filename'},
       {tuple,
        {220,31},
        [{atom,{220,32},user_type},
         {var,{220,43},'Anno'},
         {var,{220,49},'Name'},
         {var,{220,55},'Params'}]}],
      [],
      [{tuple,
        {222,5},
        [{atom,{222,6},user_type},
         {call,
          {222,17},
          {remote,{222,25},{atom,{222,17},erl_anno},{atom,{222,26},set_file}},
          [{var,{222,35},'Filename'},{var,{222,45},'Anno'}]},
         {var,{222,52},'Name'},
         {lc,
          {223,6},
          {call,
           {223,7},
           {atom,{223,7},annotate_user_type_},
           [{var,{223,27},'Filename'},{var,{223,37},'Param'}]},
          [{generate,
            {223,53},
            {var,{223,47},'Param'},
            {var,{223,56},'Params'}}]}]}]},
     {clause,
      {224,1},
      [{var,{224,21},'Filename'},
       {tuple,
        {224,31},
        [{atom,{224,32},type},
         {var,{224,38},'Anno'},
         {atom,{224,44},record},
         {match,
          {224,52},
          {var,{224,52},'RecName'},
          {cons,{224,62},{var,{224,63},'_'},{nil,{224,64}}}}]}],
      [],
      [{tuple,
        {226,5},
        [{atom,{226,6},type},
         {call,
          {226,12},
          {remote,{226,20},{atom,{226,12},erl_anno},{atom,{226,21},set_file}},
          [{var,{226,30},'Filename'},{var,{226,40},'Anno'}]},
         {atom,{226,47},record},
         {var,{226,55},'RecName'}]}]},
     {clause,
      {227,1},
      [{var,{227,21},'Filename'},
       {tuple,
        {227,31},
        [{atom,{227,32},type},
         {var,{227,38},'Anno'},
         {var,{227,44},'T'},
         {var,{227,47},'Params'}]}],
      [[{call,{227,61},{atom,{227,61},is_list},[{var,{227,69},'Params'}]}]],
      [{tuple,
        {228,5},
        [{atom,{228,6},type},
         {var,{228,12},'Anno'},
         {var,{228,18},'T'},
         {lc,
          {228,21},
          {call,
           {228,23},
           {atom,{228,23},annotate_user_types},
           [{var,{228,43},'Filename'},{var,{228,53},'Param'}]},
          [{generate,
            {229,32},
            {var,{229,26},'Param'},
            {call,
             {229,36},
             {atom,{229,36},':::'},
             [{var,{229,48},'Params'},
              {string,{229,48},"[ type ( ) ]"}]}}]}]}]},
     {clause,
      {230,1},
      [{var,{230,21},'Filename'},
       {tuple,
        {230,31},
        [{atom,{230,32},ann_type},
         {var,{230,42},'Anno'},
         {cons,
          {230,48},
          {var,{230,49},'Var'},
          {cons,{230,54},{var,{230,54},'Type'},{nil,{230,58}}}}]}],
      [],
      [{match,
        {232,5},
        {var,{232,5},'Type'},
        {call,
         {232,13},
         {atom,{232,13},':::'},
         [{var,{232,25},'Type'},{string,{232,25},"type ( )"}]}},
       {tuple,
        {233,5},
        [{atom,{233,6},ann_type},
         {var,{233,16},'Anno'},
         {cons,
          {233,22},
          {var,{233,23},'Var'},
          {cons,
           {233,28},
           {call,
            {233,28},
            {atom,{233,28},annotate_user_type_},
            [{var,{233,48},'Filename'},{var,{233,58},'Type'}]},
           {nil,{233,63}}}}]}]},
     {clause,
      {234,1},
      [{var,{234,21},'_Filename'},{var,{234,32},'Type'}],
      [],
      [{var,{235,5},'Type'}]}]}]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{file:filename(), type()}",
                     "{file:filename(),\n           {user_type, anno(), type_name(), [abstract_type()]}}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["file:filename()","file:filename()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_variable()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["op","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_integer()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_atom()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]}]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{remote_type,0,
                           [{atom,{219,27},file},{atom,{219,32},filename},[]]},
              {type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_atom,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_singleton_integer_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_variable,[]}]}]}}
{trace,<0.104.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     "{file:filename(), {type, anno(), record, none()}}",seen,
                     env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["file:filename()","file:filename()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable()",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{type, anno(), record, none()}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["union","record",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_integer()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_character()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["record","record",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["[af_atom() | af_record_field_type()]","none()",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     "{file:filename(), {ann_type, anno(), none()}}",seen,
                     env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["file:filename()","file:filename()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,call,{typechecker,refine,["var","ann_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["integer","ann_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_integer()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["integer","ann_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_character()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["char","ann_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["remote_type","ann_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_atom()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["atom","ann_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,call,{typechecker,refine,["ann_type","ann_type",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["[af_anno() | abstract_type()]","none()",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     "{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.104.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.105.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {238,1},
    get_module_from_annotation,1,
    [{clause,
      {238,1},
      [{var,{238,28},'Anno'}],
      [],
      [{'case',
        {239,5},
        {call,
         {239,10},
         {remote,{239,18},{atom,{239,10},erl_anno},{atom,{239,19},file}},
         [{var,{239,24},'Anno'}]},
        [{clause,
          {240,9},
          [{var,{240,9},'File'}],
          [[{call,{240,19},{atom,{240,19},is_list},[{var,{240,27},'File'}]}]],
          [{match,
            {241,13},
            {var,{241,13},'Basename'},
            {call,
             {241,24},
             {remote,
              {241,32},
              {atom,{241,24},filename},
              {atom,{241,33},basename}},
             [{var,{241,42},'File'},{string,{241,48},".erl"}]}},
           {tuple,
            {242,13},
            [{atom,{242,14},ok},
             {call,
              {242,18},
              {atom,{242,18},list_to_existing_atom},
              [{call,
                {242,41},
                {atom,{242,41},':::'},
                [{var,{242,53},'Basename'},
                 {string,{242,53},"string ( )"}]}]}]}]},
         {clause,
          {243,9},
          [{atom,{243,9},undefined}],
          [],
          [{atom,{244,13},none}]}]}]}]}]}}
{trace,<0.105.0>,call,
       {typechecker,refine,["filename() | undefined","[any()]",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["filename()","[any()]",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["[char()]","[any()]",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,{typechecker,refine,["<<_:_*8>>","[any()]",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {type,0,binary,[{integer,0,0},{integer,0,8}]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,{typechecker,refine,["undefined","[any()]",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{atom,0,undefined},
              {type,0,binary,[{integer,0,0},{integer,0,8}]}]}}
{trace,<0.105.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{undefined | <<_:_*8>>}","{undefined}",seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,["undefined | <<_:_*8>>","undefined",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["<<_:_*8>>","undefined",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,{typechecker,refine,["undefined","undefined",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {type,0,binary,[{integer,0,0},{integer,0,8}]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,[{type,0,binary,[{integer,0,0},{integer,0,8}]}]}}
{trace,<0.105.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{erl_anno:anno()}","{erl_anno:anno()}",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.105.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.106.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {249,1},
    substitute_type_vars,2,
    [{clause,
      {249,1},
      [{tuple,
        {249,22},
        [{atom,{249,23},type},
         {var,{249,29},'L'},
         {atom,{249,32},'fun'},
         {cons,
          {249,39},
          {match,
           {249,40},
           {var,{249,40},'Any'},
           {tuple,
            {249,46},
            [{atom,{249,47},type},{var,{249,53},'_'},{atom,{249,56},any}]}},
          {cons,{249,62},{var,{249,62},'RetTy'},{nil,{249,67}}}}]},
       {var,{249,71},'TVars'}],
      [],
      [{match,
        {254,5},
        {var,{254,5},'RetTy'},
        {call,
         {254,14},
         {atom,{254,14},':::'},
         [{var,{254,26},'RetTy'},{string,{254,26},"type ( )"}]}},
       {tuple,
        {255,5},
        [{atom,{255,6},type},
         {var,{255,12},'L'},
         {atom,{255,15},'fun'},
         {cons,
          {255,22},
          {var,{255,23},'Any'},
          {cons,
           {255,28},
           {call,
            {255,28},
            {atom,{255,28},substitute_type_vars},
            [{var,{255,49},'RetTy'},{var,{255,56},'TVars'}]},
           {nil,{255,62}}}}]}]},
     {clause,
      {256,1},
      [{tuple,
        {256,22},
        [{var,{256,23},'Tag'},
         {var,{256,28},'L'},
         {var,{256,31},'T'},
         {var,{256,34},'Params'}]},
       {var,{256,43},'TVars'}],
      [[{op,
         {257,20},
         'orelse',
         {op,{257,12},'==',{var,{257,8},'Tag'},{atom,{257,15},type}},
         {op,{258,12},'==',{var,{258,8},'Tag'},{atom,{258,15},user_type}}},
        {call,{259,8},{atom,{259,8},is_list},[{var,{259,16},'Params'}]}]],
      [{tuple,
        {264,5},
        [{var,{264,6},'Tag'},
         {var,{264,11},'L'},
         {var,{264,14},'T'},
         {lc,
          {264,17},
          {call,
           {264,18},
           {atom,{264,18},substitute_type_vars},
           [{var,{264,39},'P'},{var,{264,42},'TVars'}]},
          [{generate,
            {264,54},
            {var,{264,52},'P'},
            {call,
             {264,58},
             {atom,{264,58},':::'},
             [{var,{264,70},'Params'},{string,{264,70},"list ( )"}]}}]}]}]},
     {clause,
      {265,1},
      [{tuple,
        {265,22},
        [{atom,{265,23},remote_type},
         {var,{265,36},'L'},
         {cons,
          {265,39},
          {var,{265,40},'M'},
          {cons,
           {265,43},
           {var,{265,43},'T'},
           {cons,{265,46},{var,{265,46},'Params'},{nil,{265,52}}}}}]},
       {var,{265,56},'TVars'}],
      [],
      [{tuple,
        {266,5},
        [{atom,{266,6},remote_type},
         {var,{266,19},'L'},
         {cons,
          {266,22},
          {var,{266,23},'M'},
          {cons,
           {266,26},
           {var,{266,26},'T'},
           {cons,
            {266,29},
            {lc,
             {266,29},
             {call,
              {266,30},
              {atom,{266,30},substitute_type_vars},
              [{var,{266,51},'P'},{var,{266,54},'TVars'}]},
             [{generate,{266,66},{var,{266,64},'P'},{var,{266,69},'Params'}}]},
            {nil,{266,76}}}}}]}]},
     {clause,
      {267,1},
      [{tuple,
        {267,22},
        [{atom,{267,23},ann_type},
         {var,{267,33},'L'},
         {cons,
          {267,36},
          {match,
           {267,37},
           {var,{267,37},'Var'},
           {tuple,
            {267,43},
            [{atom,{267,44},var},{var,{267,49},'_'},{var,{267,52},'_'}]}},
          {cons,{267,56},{var,{267,56},'Type'},{nil,{267,60}}}}]},
       {var,{267,64},'TVars'}],
      [],
      [{match,
        {269,5},
        {var,{269,5},'Type'},
        {call,
         {269,13},
         {atom,{269,13},':::'},
         [{var,{269,25},'Type'},{string,{269,25},"type ( )"}]}},
       {tuple,
        {270,5},
        [{atom,{270,6},ann_type},
         {var,{270,16},'L'},
         {cons,
          {270,19},
          {var,{270,20},'Var'},
          {cons,
           {270,25},
           {call,
            {270,25},
            {atom,{270,25},substitute_type_vars},
            [{var,{270,46},'Type'},{var,{270,52},'TVars'}]},
           {nil,{270,58}}}}]}]},
     {clause,
      {271,1},
      [{tuple,
        {271,22},
        [{atom,{271,23},var},{var,{271,28},'L'},{var,{271,31},'Var'}]},
       {var,{271,37},'TVars'}],
      [],
      [{'case',
        {272,5},
        {var,{272,10},'TVars'},
        [{clause,
          {273,9},
          [{map,
            {273,9},
            [{map_field_exact,
              {273,15},
              {var,{273,11},'Var'},
              {var,{273,18},'Type'}}]}],
          [],
          [{var,{273,27},'Type'}]},
         {clause,
          {274,9},
          [{var,{274,9},'_'}],
          [],
          [{tuple,
            {274,27},
            [{atom,{274,28},var},
             {var,{274,33},'L'},
             {var,{274,36},'Var'}]}]}]}]},
     {clause,
      {276,1},
      [{match,
        {276,22},
        {var,{276,22},'Other'},
        {tuple,
         {276,30},
         [{atom,{276,31},type},
          {var,{276,37},'_'},
          {var,{276,40},'T'},
          {atom,{276,43},any}]}},
       {var,{276,49},'_'}],
      [[{op,{277,10},'==',{var,{277,8},'T'},{atom,{277,13},tuple}}],
       [{op,{277,22},'==',{var,{277,20},'T'},{atom,{277,25},map}}]],
      [{var,{278,5},'Other'}]},
     {clause,
      {279,1},
      [{match,
        {279,22},
        {var,{279,22},'Other'},
        {tuple,
         {279,30},
         [{atom,{279,31},op},
          {var,{279,35},'_'},
          {var,{279,38},'_Op'},
          {var,{279,43},'_Arg'}]}},
       {var,{279,50},'_'}],
      [],
      [{var,{281,5},'Other'}]},
     {clause,
      {282,1},
      [{match,
        {282,22},
        {var,{282,22},'Other'},
        {tuple,
         {282,30},
         [{atom,{282,31},op},
          {var,{282,35},'_'},
          {var,{282,38},'_Op'},
          {var,{282,43},'_Arg1'},
          {var,{282,50},'_Arg2'}]}},
       {var,{282,58},'_'}],
      [],
      [{var,{284,5},'Other'}]},
     {clause,
      {285,1},
      [{match,
        {285,22},
        {var,{285,22},'Other'},
        {tuple,
         {285,30},
         [{var,{285,31},'T'},{var,{285,34},'_'},{var,{285,37},'_'}]}},
       {var,{285,41},'_'}],
      [[{op,{286,10},'==',{var,{286,8},'T'},{atom,{286,13},atom}}],
       [{op,{286,21},'==',{var,{286,19},'T'},{atom,{286,24},integer}}],
       [{op,{286,35},'==',{var,{286,33},'T'},{atom,{286,38},char}}]],
      [{var,{287,5},'Other'}]}]}]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{type, anno(), 'fun', none()}, #{atom() => type()}}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["type()","{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{type, anno(), 'fun', none()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["user_type","type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{type, anno(), 'fun', none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["union","'fun'",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["tuple","'fun'",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["tuple","'fun'",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["record","'fun'",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), 'fun', none()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["type_name()","'fun'",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{remote_type, anno(), none()}, #{atom() => type()}}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["type()","{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{remote_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{remote_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["var","remote_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["integer","remote_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["integer","remote_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["char","remote_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,["remote_type","remote_type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["[af_atom() | af_atom() | [abstract_type()]]","none()",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{ann_type, anno(), none()}, #{atom() => type()}}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,["type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["var","ann_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["integer","ann_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["integer","ann_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["char","ann_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,["remote_type","ann_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_atom()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["atom","ann_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["ann_type","ann_type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["[af_anno() | abstract_type()]","none()",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{#{atom() => type()}}","{#{atom() := type()}}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() := type()}",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,map,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,[{type,0,map,[]}]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,{typechecker,refine,["{#{}}","{#{}}",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{var, anno(), gr_type_var()}, #{atom() => type()}}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["type()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["integer","var",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["integer","var",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["char","var",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["remote_type","var",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_atom()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["atom","var",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["ann_type","var",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() => type()}",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_atom,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_singleton_integer_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_user_defined_type,[]}]},
              {type,0,map,
                    [{type,0,map_field_assoc,
                           [{type,0,atom,[]},{user_type,0,type,[]}]}]}]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_user_defined_type(),\n           #{atom() => type()}}",
                     "{{op, anno(), unary_op(), af_singleton_integer_type()},\n           #{atom() => type()}}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_user_defined_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["user_type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         gr_integer,[]}]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_atom()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         gr_integer,[]}]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() => type()}",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_atom,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_character,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  gr_integer,[]}]},
         {type,0,map,
             [{type,0,map_field_assoc,
                  [{type,0,atom,[]},{user_type,0,type,[]}]}]}]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_atom() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_character() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_user_defined_type() |\n           gr_integer(),\n           #{atom() => type()}}",
                     "{{op,\n            anno(),\n            binary_op(),\n            af_singleton_integer_type(),\n            af_singleton_integer_type()},\n           #{atom() => type()}}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_character() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_user_defined_type() |\n          gr_integer()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_atom()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         gr_integer,[]}]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() => type()}",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_atom,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_character,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_user_defined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                gr_integer,[]}]},
              {type,0,map,
                    [{type,0,map_field_assoc,
                           [{type,0,atom,[]},{user_type,0,type,[]}]}]}]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.107.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {328,1},
             reduce_type,3,
             [{clause,
                  {328,1},
                  [{var,{328,13},'Fun'},
                   {var,{328,18},'Acc'},
                   {var,{328,23},'Type'}],
                  [],
                  [{call,
                       {329,5},
                       {atom,{329,5},reduce},
                       [{var,{329,12},'Fun'},
                        {atom,{329,17},apply},
                        {var,{329,24},'Acc'},
                        {var,{329,29},'Type'}]}]}]}]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_57) ->\n                   {walkable_type(), Acc_typechecker_3529_57}),\n           Acc_typechecker_3529_57,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_57) ->\n                   {walkable_type(), Acc_typechecker_3529_57}),\n           Acc_typechecker_3529_57,\n           walkable_type()}",
                     seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.107.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.108.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {335,1},
             reduce,4,
             [{clause,
                  {335,1},
                  [{var,{335,8},'Fun'},
                   {var,{335,13},'_'},
                   {var,{335,16},'Acc'},
                   {match,
                       {335,21},
                       {tuple,
                           {335,21},
                           [{atom,{335,22},atom},
                            {var,{335,30},'_'},
                            {var,{335,33},'_'}]},
                       {var,{335,38},'Ty'}}],
                  [],
                  [{call,
                       {335,58},
                       {var,{335,58},'Fun'},
                       [{var,{335,62},'Ty'},{var,{335,66},'Acc'}]}]},
              {clause,
                  {336,1},
                  [{var,{336,8},'Fun'},
                   {var,{336,13},'_'},
                   {var,{336,16},'Acc'},
                   {match,
                       {336,21},
                       {tuple,
                           {336,21},
                           [{atom,{336,22},type},
                            {var,{336,30},'_Anno'},
                            {var,{336,37},'_Name'},
                            {atom,{336,44},any}]},
                       {var,{336,51},'Ty'}}],
                  [],
                  [{call,
                       {336,58},
                       {var,{336,58},'Fun'},
                       [{var,{336,62},'Ty'},{var,{336,66},'Acc'}]}]},
              {clause,
                  {337,1},
                  [{var,{337,8},'Fun'},
                   {var,{337,13},'_'},
                   {var,{337,16},'Acc'},
                   {match,
                       {337,21},
                       {tuple,
                           {337,21},
                           [{atom,{337,22},integer},
                            {var,{337,33},'_'},
                            {var,{337,36},'_'}]},
                       {var,{337,41},'Ty'}}],
                  [],
                  [{call,
                       {337,58},
                       {var,{337,58},'Fun'},
                       [{var,{337,62},'Ty'},{var,{337,66},'Acc'}]}]},
              {clause,
                  {338,1},
                  [{var,{338,8},'Fun'},
                   {var,{338,13},'_'},
                   {var,{338,16},'Acc'},
                   {match,
                       {338,21},
                       {tuple,
                           {338,21},
                           [{atom,{338,22},char},
                            {var,{338,30},'_'},
                            {var,{338,33},'_'}]},
                       {var,{338,38},'Ty'}}],
                  [],
                  [{call,
                       {338,58},
                       {var,{338,58},'Fun'},
                       [{var,{338,62},'Ty'},{var,{338,66},'Acc'}]}]},
              {clause,
                  {339,1},
                  [{var,{339,8},'Fun'},
                   {var,{339,13},'_'},
                   {var,{339,16},'Acc'},
                   {match,
                       {339,21},
                       {tuple,
                           {339,21},
                           [{atom,{339,22},type},
                            {var,{339,30},'_Anno'},
                            {atom,{339,37},any}]},
                       {var,{339,44},'Ty'}}],
                  [],
                  [{call,
                       {339,58},
                       {var,{339,58},'Fun'},
                       [{var,{339,62},'Ty'},{var,{339,66},'Acc'}]}]},
              {clause,
                  {340,1},
                  [{var,{340,8},'Fun'},
                   {var,{340,13},'_'},
                   {var,{340,16},'Acc'},
                   {match,
                       {340,21},
                       {atom,{340,21},pos_inf},
                       {var,{340,31},'Ty'}}],
                  [],
                  [{call,
                       {340,58},
                       {var,{340,58},'Fun'},
                       [{var,{340,62},'Ty'},{var,{340,66},'Acc'}]}]},
              {clause,
                  {341,1},
                  [{var,{341,8},'Fun'},
                   {var,{341,13},'_'},
                   {var,{341,16},'Acc'},
                   {match,
                       {341,21},
                       {atom,{341,21},neg_inf},
                       {var,{341,31},'Ty'}}],
                  [],
                  [{call,
                       {341,58},
                       {var,{341,58},'Fun'},
                       [{var,{341,62},'Ty'},{var,{341,66},'Acc'}]}]},
              {clause,
                  {342,1},
                  [{var,{342,8},'Fun'},
                   {var,{342,13},'_'},
                   {var,{342,16},'Acc'},
                   {match,
                       {342,21},
                       {tuple,
                           {342,21},
                           [{atom,{342,22},var},
                            {var,{342,27},'_'},
                            {var,{342,30},'_'}]},
                       {var,{342,35},'Ty'}}],
                  [],
                  [{call,
                       {342,58},
                       {var,{342,58},'Fun'},
                       [{var,{342,62},'Ty'},{var,{342,66},'Acc'}]}]},
              {clause,
                  {343,1},
                  [{var,{343,8},'Fun'},
                   {atom,{343,13},apply},
                   {var,{343,20},'Acc'},
                   {var,{343,25},'Ty'}],
                  [],
                  [{match,
                       {344,5},
                       {tuple,
                           {344,5},
                           [{var,{344,6},'NewTy'},{var,{344,13},'Acc1'}]},
                       {call,
                           {344,21},
                           {var,{344,21},'Fun'},
                           [{var,{344,25},'Ty'},{var,{344,29},'Acc'}]}},
                   {call,
                       {345,5},
                       {atom,{345,5},reduce},
                       [{var,{345,12},'Fun'},
                        {atom,{345,17},recurse},
                        {var,{345,26},'Acc1'},
                        {var,{345,32},'NewTy'}]}]},
              {clause,
                  {346,1},
                  [{var,{346,8},'Fun'},
                   {atom,{346,13},recurse},
                   {var,{346,22},'Acc'},
                   {tuple,
                       {346,27},
                       [{atom,{346,28},op},
                        {var,{346,34},'_'},
                        {var,{346,37},'_'},
                        {var,{346,40},'Ty1'}]}],
                  [],
                  [{call,
                       {346,66},
                       {atom,{346,66},reduce_rec},
                       [{var,{346,77},'Fun'},
                        {var,{346,82},'Acc'},
                        {cons,
                            {346,87},
                            {var,{346,88},'Ty1'},
                            {nil,{346,91}}}]}]},
              {clause,
                  {347,1},
                  [{var,{347,8},'Fun'},
                   {atom,{347,13},recurse},
                   {var,{347,22},'Acc'},
                   {tuple,
                       {347,27},
                       [{atom,{347,28},op},
                        {var,{347,34},'_'},
                        {var,{347,37},'_'},
                        {var,{347,40},'Ty1'},
                        {var,{347,45},'Ty2'}]}],
                  [],
                  [{call,
                       {347,66},
                       {atom,{347,66},reduce_rec},
                       [{var,{347,77},'Fun'},
                        {var,{347,82},'Acc'},
                        {cons,
                            {347,87},
                            {var,{347,88},'Ty1'},
                            {cons,
                                {347,93},
                                {var,{347,93},'Ty2'},
                                {nil,{347,96}}}}]}]},
              {clause,
                  {348,1},
                  [{var,{348,8},'Fun'},
                   {atom,{348,13},recurse},
                   {var,{348,22},'Acc'},
                   {tuple,
                       {348,27},
                       [{atom,{348,28},ann_type},
                        {var,{348,40},'_Anno'},
                        {var,{348,47},'Args'}]}],
                  [],
                  [{call,
                       {348,66},
                       {atom,{348,66},reduce_rec},
                       [{var,{348,77},'Fun'},
                        {var,{348,82},'Acc'},
                        {var,{348,87},'Args'}]}]},
              {clause,
                  {349,1},
                  [{var,{349,8},'Fun'},
                   {atom,{349,13},recurse},
                   {var,{349,22},'Acc'},
                   {tuple,
                       {349,27},
                       [{atom,{349,28},type},
                        {var,{349,36},'_Anno'},
                        {var,{349,43},'_Name'},
                        {var,{349,50},'Args'}]}],
                  [],
                  [{call,
                       {349,66},
                       {atom,{349,66},reduce_rec},
                       [{var,{349,77},'Fun'},
                        {var,{349,82},'Acc'},
                        {var,{349,87},'Args'}]}]},
              {clause,
                  {350,1},
                  [{var,{350,8},'Fun'},
                   {atom,{350,13},recurse},
                   {var,{350,22},'Acc'},
                   {tuple,
                       {350,27},
                       [{atom,{350,28},remote_type},
                        {var,{350,43},'_Anno'},
                        {cons,
                            {350,50},
                            {var,{350,51},'M'},
                            {cons,
                                {350,54},
                                {var,{350,54},'T'},
                                {cons,
                                    {350,57},
                                    {var,{350,57},'As'},
                                    {nil,{350,59}}}}}]}],
                  [],
                  [{call,
                       {350,66},
                       {atom,{350,66},reduce_rec},
                       [{var,{350,77},'Fun'},
                        {var,{350,82},'Acc'},
                        {cons,
                            {350,87},
                            {var,{350,88},'M'},
                            {cons,
                                {350,91},
                                {var,{350,91},'T'},
                                {var,{350,95},'As'}}}]}]},
              {clause,
                  {351,1},
                  [{var,{351,8},'Fun'},
                   {atom,{351,13},recurse},
                   {var,{351,22},'Acc'},
                   {tuple,
                       {351,27},
                       [{atom,{351,28},user_type},
                        {var,{351,41},'_Anno'},
                        {var,{351,48},'_Name'},
                        {var,{351,55},'Args'}]}],
                  [],
                  [{call,
                       {351,66},
                       {atom,{351,66},reduce_rec},
                       [{var,{351,77},'Fun'},
                        {var,{351,82},'Acc'},
                        {var,{351,87},'Args'}]}]}]}]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {atom, anno(), atom()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           none()}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {integer, anno(), non_neg_integer()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {char, anno(), char()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {type, _, any}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59, pos_inf}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59, neg_inf}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {var, anno(), gr_type_var()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply, Acc_typechecker_3529_59,\n           walkable_type()}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","apply",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","apply",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,recurse}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {op, anno(), unary_op(), af_singleton_integer_type()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {op,\n            anno(),\n            binary_op(),\n            af_singleton_integer_type(),\n            af_singleton_integer_type()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {ann_type, anno(), [af_anno() | abstract_type()]}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           none()}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {remote_type, anno(), none()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {user_type, anno(), type_name(), [abstract_type()]}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.109.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {353,1},
    reduce_rec,3,
    [{clause,
      {353,1},
      [{var,{353,12},'Fun'},{var,{353,17},'Acc'},{var,{353,22},'Args'}],
      [],
      [{call,
        {354,5},
        {remote,{354,10},{atom,{354,5},lists},{atom,{354,11},foldl}},
        [{'fun',
          {354,17},
          {clauses,
           [{clause,
             {354,21},
             [{var,{354,22},'Arg'},
              {tuple,{354,27},[{var,{354,28},'_'},{var,{354,31},'Acc1'}]}],
             [],
             [{call,
               {355,25},
               {atom,{355,25},reduce},
               [{var,{355,32},'Fun'},
                {atom,{355,37},apply},
                {var,{355,44},'Acc1'},
                {var,{355,50},'Arg'}]}]}]}},
         {tuple,{356,22},[{atom,{356,23},ok},{var,{356,27},'Acc'}]},
         {var,{356,33},'Args'}]}]}]}]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{T_typechecker_3529_61, Acc_typechecker_3529_62}",
                     "{T_typechecker_3529_61,\n           {Acc_typechecker_3529_62_typechecker_1257_63,\n            Acc_typechecker_3529_62_typechecker_1257_64}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["T_typechecker_3529_61","T_typechecker_3529_61",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{any(), any(), any()}","{any(), any(), any()}",seen,
                     env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,return_to,{typechecker,type_check_form,5}}
src/typelib.erl: Nonexhaustive patterns on line 116 at column 1
Example values which are not covered:
	{integer, Opaque3, - 1}
