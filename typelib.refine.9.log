{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [{[{user_type,0,af_constraint,[]}],
                      {user_type,0,af_constraint,[]}},
                     "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] =>
                           [{user_type,0,af_constraint,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_constraint()}","{af_constraint()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
                     "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type()}",
                     "{{type, anno(), constraint, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["type()","{type, anno(), constraint, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["user_type","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
                     "fun({atom = Type, _, Value}) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,["{type()}","{{atom, anno(), atom()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["char","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,["af_atom()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_singleton_integer_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_variable,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({integer = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_user_defined_type()}",
                     "{{integer, anno(), integer()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_user_defined_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["char","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_character,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_variable,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({char = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_character() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{char, anno(), char()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_character() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{char, anno(), char()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{char, anno(), char()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_variable,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({var = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{var, anno(), gr_type_var()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","var",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","var",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({user_type, Anno, Name, Params}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{user_type, anno(), type_name(), [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type,\n            anno(),\n            record,\n            [{atom, anno(), atom()} |\n             {type,\n              anno(),\n              field_type,\n              [{atom, anno(), atom()} |\n               af_annotated_type() |\n               af_atom() |\n               af_bitstring_type() |\n               af_constrained_function_type() |\n               af_empty_list_type() |\n               af_fun_type() |\n               af_integer_range_type() |\n               af_map_type() |\n               af_predefined_type() |\n               af_record_type() |\n               af_remote_type() |\n               af_singleton_integer_type() |\n               af_tuple_type() |\n               af_type_union() |\n               af_type_variable() |\n               af_user_defined_type()]},\n             ...]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","record",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["[af_atom() | af_record_field_type()]",
                     "[{atom, anno(), atom()} |\n           {type,\n            anno(),\n            field_type,\n            [{atom, anno(), atom()} |\n             af_annotated_type() |\n             af_atom() |\n             af_bitstring_type() |\n             af_constrained_function_type() |\n             af_empty_list_type() |\n             af_fun_type() |\n             af_integer_range_type() |\n             af_map_type() |\n             af_predefined_type() |\n             af_record_type() |\n             af_remote_type() |\n             af_singleton_integer_type() |\n             af_tuple_type() |\n             af_type_union() |\n             af_type_variable() |\n             af_user_defined_type()]},\n           ...]",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_atom() | af_record_field_type()",
                     "{atom, anno(), atom()} |\n          {type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_field_type()",
                     "{atom, anno(), atom()} |\n          {type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), field_type, [af_atom() | abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-7-',4}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), field_type, [af_atom() | abstract_type()]}",
                     "{type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["field_type","field_type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["[af_atom() | abstract_type()]",
                     "[{atom, anno(), atom()} |\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_user_defined_type()]",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-7-',4}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), field_type, none()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, tuple = Type, any}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), tuple, any}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","tuple",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["[abstract_type()]","any",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{atom,0,type},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],anno,[]},
              {atom,0,tuple},
              {type,0,list,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                abstract_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map = Type, any}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map, any}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{type, anno(), map, any}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), map, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, Type, Params}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{A_typechecker_3529_22}",
                     "{{type, A_typechecker_3529_22_typechecker_1257_27, any}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["A_typechecker_3529_22",
                     "{type, A_typechecker_3529_22_typechecker_1257_27, any}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["A_typechecker_3529_22","[any()]",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{A_typechecker_3529_22}","{A_typechecker_3529_22}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{none()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "none()",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map_field_exact = Assoc, Tys}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map_field_exact, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map_field_assoc = Assoc, Tys}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map_field_assoc, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({remote_type, _, _} = RemoteType) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{remote_type,\n            anno(),\n            [af_atom() | af_atom() | [abstract_type()]]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","remote_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({ann_type, _, _} = AnnType) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{ann_type, anno(), [af_anno() | abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({op, _, Op, Type}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({op, _, _Op, _Type1, _Type2} = BinOp) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{op,\n            anno(),\n            binary_op(),\n            af_singleton_integer_type(),\n            af_singleton_integer_type()}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "no_clause",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_check_form,5}}
