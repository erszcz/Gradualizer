{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [{[{user_type,0,af_constraint,[]}],
                      {user_type,0,af_constraint,[]}},
                     "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] =>
                           [{user_type,0,af_constraint,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_constraint()}","{af_constraint()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
                     "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type()}",
                     "{{type, anno(), constraint, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["type()","{type, anno(), constraint, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["user_type","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
                     "fun({atom = Type, _, Value}) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,["{type()}","{{atom, anno(), atom()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["char","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,["af_atom()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_singleton_integer_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_variable,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({integer = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_user_defined_type()}",
                     "{{integer, anno(), integer()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_user_defined_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["char","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_character,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_variable,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({char = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_character() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{char, anno(), char()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_character() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{char, anno(), char()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{char, anno(), char()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_variable,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({var = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{var, anno(), gr_type_var()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","var",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","var",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({user_type, Anno, Name, Params}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{user_type, anno(), type_name(), [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type,\n            anno(),\n            record,\n            [{atom, anno(), atom()} |\n             {type,\n              anno(),\n              field_type,\n              [{atom, anno(), atom()} |\n               af_annotated_type() |\n               af_atom() |\n               af_bitstring_type() |\n               af_constrained_function_type() |\n               af_empty_list_type() |\n               af_fun_type() |\n               af_integer_range_type() |\n               af_map_type() |\n               af_predefined_type() |\n               af_record_type() |\n               af_remote_type() |\n               af_singleton_integer_type() |\n               af_tuple_type() |\n               af_type_union() |\n               af_type_variable() |\n               af_user_defined_type()]},\n             ...]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","record",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["[af_atom() | af_record_field_type()]",
                     "[{atom, anno(), atom()} |\n           {type,\n            anno(),\n            field_type,\n            [{atom, anno(), atom()} |\n             af_annotated_type() |\n             af_atom() |\n             af_bitstring_type() |\n             af_constrained_function_type() |\n             af_empty_list_type() |\n             af_fun_type() |\n             af_integer_range_type() |\n             af_map_type() |\n             af_predefined_type() |\n             af_record_type() |\n             af_remote_type() |\n             af_singleton_integer_type() |\n             af_tuple_type() |\n             af_type_union() |\n             af_type_variable() |\n             af_user_defined_type()]},\n           ...]",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_atom() | af_record_field_type()",
                     "{atom, anno(), atom()} |\n          {type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_field_type()",
                     "{atom, anno(), atom()} |\n          {type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), field_type, [af_atom() | abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-7-',4}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), field_type, [af_atom() | abstract_type()]}",
                     "{type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["field_type","field_type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["[af_atom() | abstract_type()]",
                     "[{atom, anno(), atom()} |\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_user_defined_type()]",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-7-',4}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), field_type, none()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, tuple = Type, any}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), tuple, any}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","tuple",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["[abstract_type()]","any",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{atom,0,type},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],anno,[]},
              {atom,0,tuple},
              {type,0,list,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                abstract_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map = Type, any}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map, any}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{type, anno(), map, any}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), map, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, Type, Params}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{A_typechecker_3529_22}",
                     "{{type, A_typechecker_3529_22_typechecker_1257_27, any}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["A_typechecker_3529_22",
                     "{type, A_typechecker_3529_22_typechecker_1257_27, any}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["A_typechecker_3529_22","[any()]",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{A_typechecker_3529_22}","{A_typechecker_3529_22}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{none()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "none()",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map_field_exact = Assoc, Tys}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map_field_exact, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map_field_assoc = Assoc, Tys}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map_field_assoc, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({remote_type, _, _} = RemoteType) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{remote_type,\n            anno(),\n            [af_atom() | af_atom() | [abstract_type()]]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","remote_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({ann_type, _, _} = AnnType) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{ann_type, anno(), [af_anno() | abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({op, _, Op, Type}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({op, _, Op, Type1, Type2}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "no_clause",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.96.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {164,1},
    remove_pos_constraint,1,
    [{clause,
      {164,1},
      [{tuple,
        {164,23},
        [{atom,{164,24},type},
         {var,{164,30},'_'},
         {atom,{164,33},constraint},
         {cons,
          {164,45},
          {tuple,
           {164,46},
           [{atom,{164,47},atom},
            {var,{164,53},'_'},
            {atom,{164,56},is_subtype}]},
          {cons,{164,69},{var,{164,69},'Args'},{nil,{164,73}}}}]}],
      [],
      [{match,
        {165,5},
        {var,{165,5},'L'},
        {call,
         {165,9},
         {remote,{165,17},{atom,{165,9},erl_anno},{atom,{165,18},new}},
         [{integer,{165,22},0}]}},
       {tuple,
        {166,5},
        [{atom,{166,6},type},
         {var,{166,12},'L'},
         {atom,{166,15},constraint},
         {cons,
          {166,27},
          {tuple,
           {166,28},
           [{atom,{166,29},atom},
            {var,{166,35},'L'},
            {atom,{166,38},is_subtype}]},
          {cons,
           {166,51},
           {call,
            {166,51},
            {remote,{166,56},{atom,{166,51},lists},{atom,{166,57},map}},
            [{'fun',{166,61},{function,remove_pos,1}},{var,{166,79},'Args'}]},
           {nil,{166,84}}}}]}]}]}]}}
{trace,<0.96.0>,call,{typechecker,refine,["{any()}","{none()}",seen,env]}}
{trace,<0.96.0>,call,{typechecker,refine,["any()","none()",seen,env]}}
{trace,<0.96.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.96.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.96.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.96.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.97.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {169,1},
             remove_pos_all,1,
             [{clause,{169,1},[{nil,{169,16}}],[],[{nil,{170,5}}]},
              {clause,
                  {171,1},
                  [{match,
                       {171,16},
                       {cons,{171,16},{var,{171,17},'_'},{var,{171,19},'_'}},
                       {var,{171,24},'L'}}],
                  [],
                  [{call,
                       {172,5},
                       {remote,
                           {172,10},
                           {atom,{172,5},lists},
                           {atom,{172,11},map}},
                       [{'fun',{172,15},{function,remove_pos,1}},
                        {var,{172,33},'L'}]}]}]}]}}
{trace,<0.97.0>,call,{typechecker,refine,["{list()}","{[]}",seen,env]}}
{trace,<0.97.0>,call,{typechecker,refine,["list()","[]",seen,env]}}
{trace,<0.97.0>,return_from,
       {typechecker,refine,4},
       {type,0,nonempty_list,[{type,0,any,[]}]}}
{trace,<0.97.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.97.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,[{type,0,nonempty_list,[{type,0,any,[]}]}]}}
{trace,<0.97.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.97.0>,call,
       {typechecker,refine,["{[any(), ...]}","{[any(), ...]}",seen,env]}}
{trace,<0.97.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.97.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.97.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.98.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {174,1},
             remove_pos_remote_type,1,
             [{clause,
                  {174,1},
                  [{tuple,
                       {174,24},
                       [{atom,{174,25},remote_type},
                        {var,{174,38},'_'},
                        {cons,
                            {174,41},
                            {var,{174,42},'Mod'},
                            {cons,
                                {174,47},
                                {var,{174,47},'Name'},
                                {cons,
                                    {174,53},
                                    {var,{174,53},'Params'},
                                    {nil,{174,59}}}}}]}],
                  [],
                  [{match,
                       {175,5},
                       {var,{175,5},'Params1'},
                       {call,
                           {175,15},
                           {remote,
                               {175,20},
                               {atom,{175,15},lists},
                               {atom,{175,21},map}},
                           [{'fun',{175,25},{function,remove_pos,1}},
                            {var,{175,43},'Params'}]}},
                   {tuple,
                       {176,5},
                       [{atom,{176,6},remote_type},
                        {call,
                            {176,19},
                            {remote,
                                {176,27},
                                {atom,{176,19},erl_anno},
                                {atom,{176,28},new}},
                            [{integer,{176,32},0}]},
                        {cons,
                            {176,36},
                            {var,{176,37},'Mod'},
                            {cons,
                                {176,42},
                                {var,{176,42},'Name'},
                                {cons,
                                    {176,48},
                                    {var,{176,48},'Params1'},
                                    {nil,{176,55}}}}}]}]}]}]}}
{trace,<0.98.0>,call,{typechecker,refine,["{any()}","{none()}",seen,env]}}
{trace,<0.98.0>,call,{typechecker,refine,["any()","none()",seen,env]}}
{trace,<0.98.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.98.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.98.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.98.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.99.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {178,1},
             remove_pos_ann_type,1,
             [{clause,
                  {178,1},
                  [{tuple,
                       {178,21},
                       [{atom,{178,22},ann_type},
                        {var,{178,32},'_'},
                        {cons,
                            {178,35},
                            {var,{178,36},'_Var'},
                            {cons,
                                {178,42},
                                {var,{178,42},'Type'},
                                {nil,{178,46}}}}]}],
                  [],
                  [{call,
                       {180,5},
                       {atom,{180,5},remove_pos},
                       [{call,
                            {180,17},
                            {atom,{180,17},':::'},
                            [{var,{180,29},'Type'},
                             {string,{180,29},"type ( )"}]}]}]}]}]}}
{trace,<0.99.0>,call,{typechecker,refine,["{any()}","{none()}",seen,env]}}
{trace,<0.99.0>,call,{typechecker,refine,["any()","none()",seen,env]}}
{trace,<0.99.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.99.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.99.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.99.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.100.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {184,1},
             anno_keep_only_filename,1,
             [{clause,
                  {184,1},
                  [{var,{184,25},'Anno'}],
                  [],
                  [{match,
                       {185,5},
                       {var,{185,5},'NewAnno'},
                       {call,
                           {185,15},
                           {remote,
                               {185,23},
                               {atom,{185,15},erl_anno},
                               {atom,{185,24},new}},
                           [{integer,{185,28},0}]}},
                   {'case',
                       {186,5},
                       {call,
                           {186,10},
                           {remote,
                               {186,18},
                               {atom,{186,10},erl_anno},
                               {atom,{186,19},file}},
                           [{var,{186,24},'Anno'}]},
                       [{clause,
                            {187,9},
                            [{atom,{187,9},undefined}],
                            [],
                            [{var,{187,22},'NewAnno'}]},
                        {clause,
                            {188,9},
                            [{var,{188,9},'Filename'}],
                            [],
                            [{call,
                                 {188,22},
                                 {remote,
                                     {188,30},
                                     {atom,{188,22},erl_anno},
                                     {atom,{188,31},set_file}},
                                 [{var,{188,40},'Filename'},
                                  {var,{188,50},'NewAnno'}]}]}]}]}]}]}}
{trace,<0.100.0>,call,
       {typechecker,refine,
                    ["{filename() | undefined}","{undefined}",seen,env]}}
{trace,<0.100.0>,call,
       {typechecker,refine,["filename() | undefined","undefined",seen,env]}}
{trace,<0.100.0>,call,
       {typechecker,refine,["filename()","undefined",seen,env]}}
{trace,<0.100.0>,call,{typechecker,refine,["[char()]","undefined",seen,env]}}
{trace,<0.100.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.100.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.100.0>,call,{typechecker,refine,["<<_:_*8>>","undefined",seen,env]}}
{trace,<0.100.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.100.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.100.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"erl_anno.erl"},{location,0}],filename,[]}}
{trace,<0.100.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.100.0>,call,{typechecker,refine,["undefined","undefined",seen,env]}}
{trace,<0.100.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.100.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.100.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"erl_anno.erl"},{location,0}],filename,[]}}
{trace,<0.100.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.100.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{user_type,[{file,"erl_anno.erl"},{location,0}],filename,[]}]}}
{trace,<0.100.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.100.0>,call,
       {typechecker,refine,["{filename()}","{filename()}",seen,env]}}
{trace,<0.100.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.100.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.100.0>,call,
       {typechecker,refine,
                    ["{erl_anno:anno()}","{erl_anno:anno()}",seen,env]}}
{trace,<0.100.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.100.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.100.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.101.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {193,1},
             annotate_user_type,2,
             [{clause,
                  {193,1},
                  [{var,{193,20},'ModOrFile'},{var,{193,31},'Type'}],
                  [],
                  [{match,
                       {194,5},
                       {var,{194,5},'Filename'},
                       {call,
                           {194,16},
                           {atom,{194,16},ensure_filename},
                           [{var,{194,32},'ModOrFile'}]}},
                   {call,
                       {195,5},
                       {atom,{195,5},annotate_user_type_},
                       [{var,{195,25},'Filename'},
                        {var,{195,35},'Type'}]}]}]}]}}
{trace,<0.101.0>,call,
       {typechecker,refine,
                    ["{module() | file:filename(), type()}",
                     "{module() | file:filename(), type()}",seen,env]}}
{trace,<0.101.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.101.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.101.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.102.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {198,1},
    ensure_filename,1,
    [{clause,
      {198,1},
      [{var,{198,17},'ModOrFile'}],
      [],
      [{'case',
        {199,5},
        {var,{199,10},'ModOrFile'},
        [{clause,
          {200,9},
          [{var,{200,9},'Module'}],
          [[{call,
             {200,21},
             {atom,{200,21},is_atom},
             [{var,{200,29},'ModOrFile'}]}]],
          [{op,
            {201,56},
            '++',
            {call,
             {201,13},
             {atom,{201,13},atom_to_list},
             [{call,
               {201,27},
               {atom,{201,27},':::'},
               [{var,{201,39},'Module'},{string,{201,39},"atom ( )"}]}]},
            {string,{201,59},".erl"}}]},
         {clause,
          {202,9},
          [{var,{202,9},'_'}],
          [],
          [{var,{202,14},'ModOrFile'}]}]}]}]}]}}
{trace,<0.102.0>,call,
       {typechecker,refine,["atom() | [char()]","atom()",seen,env]}}
{trace,<0.102.0>,call,{typechecker,refine,["[char()]","atom()",seen,env]}}
{trace,<0.102.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.102.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.102.0>,call,{typechecker,refine,["atom()","atom()",seen,env]}}
{trace,<0.102.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.102.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.102.0>,return_from,
       {typechecker,refine,4},
       {type,0,list,[{type,0,char,[]}]}}
{trace,<0.102.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.102.0>,call,
       {typechecker,refine,
                    ["{atom() | [char()]}","{atom() | [char()]}",seen,env]}}
{trace,<0.102.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.102.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.102.0>,call,
       {typechecker,refine,
                    ["{module() | file:filename()}",
                     "{module() | file:filename()}",seen,env]}}
{trace,<0.102.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.102.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.102.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.103.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {209,1},
    annotate_user_types,2,
    [{clause,
      {209,1},
      [{var,{209,21},'ModOrFile'},{var,{209,32},'TypeOrTypes'}],
      [],
      [{'case',
        {210,5},
        {var,{210,10},'TypeOrTypes'},
        [{clause,
          {211,9},
          [{var,{211,9},'Types'}],
          [[{call,{211,20},{atom,{211,20},is_list},[{var,{211,28},'Types'}]}]],
          [{lc,
            {212,13},
            {call,
             {212,15},
             {atom,{212,15},annotate_user_type},
             [{var,{212,34},'ModOrFile'},{var,{212,45},'Type'}]},
            [{generate,
              {212,59},
              {var,{212,54},'Type'},
              {call,
               {212,63},
               {atom,{212,63},':::'},
               [{var,{212,75},'Types'},{string,{212,75},"[ type ( ) ]"}]}}]}]},
         {clause,
          {213,9},
          [{var,{213,9},'Type'}],
          [],
          [{call,
            {214,13},
            {atom,{214,13},annotate_user_type},
            [{var,{214,32},'ModOrFile'},
             {call,
              {214,44},
              {atom,{214,44},':::'},
              [{var,{214,56},'Type'},
               {string,{214,56},"type ( )"}]}]}]}]}]}]}]}}
{trace,<0.103.0>,call,
       {typechecker,refine,["[type()] | type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,{typechecker,refine,["type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_user_defined_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_type_variable()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_type_union()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_tuple_type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}","[any()]",
                     seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["{type, anno(), tuple, any}","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,
       {typechecker,refine,["gr_integer()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())","[any()]",
                     seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_character()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())","[any()]",
                     seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_remote_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_record_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_predefined_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_map_type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}","[any()]",seen,
                     env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["{type, anno(), map, any}","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_integer_range_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_fun_type()","[any()]",seen,env]}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_function_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["{type, anno(), 'fun', []}","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_empty_list_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_bitstring_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,{typechecker,refine,["af_atom()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,
       {typechecker,refine,["af_annotated_type()","[any()]",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{user_type,0,type,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,{typechecker,refine,["[type()]","[any()]",seen,env]}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{user_type,0,type,[]}}
{trace,<0.103.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.103.0>,call,{typechecker,refine,["{type()}","{type()}",seen,env]}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.103.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["{atom() | [char()], [type()] | type()}",
                     "{atom() | [char()], [type()] | type()}",seen,env]}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.103.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.103.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.104.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {218,1},
    annotate_user_type_,2,
    [{clause,
      {218,1},
      [{var,{218,21},'Filename'},
       {tuple,
        {218,31},
        [{atom,{218,32},user_type},
         {var,{218,43},'Anno'},
         {var,{218,49},'Name'},
         {var,{218,55},'Params'}]}],
      [],
      [{tuple,
        {220,5},
        [{atom,{220,6},user_type},
         {call,
          {220,17},
          {remote,{220,25},{atom,{220,17},erl_anno},{atom,{220,26},set_file}},
          [{var,{220,35},'Filename'},{var,{220,45},'Anno'}]},
         {var,{220,52},'Name'},
         {lc,
          {221,6},
          {call,
           {221,7},
           {atom,{221,7},annotate_user_type_},
           [{var,{221,27},'Filename'},{var,{221,37},'Param'}]},
          [{generate,
            {221,53},
            {var,{221,47},'Param'},
            {var,{221,56},'Params'}}]}]}]},
     {clause,
      {222,1},
      [{var,{222,21},'Filename'},
       {tuple,
        {222,31},
        [{atom,{222,32},type},
         {var,{222,38},'Anno'},
         {atom,{222,44},record},
         {match,
          {222,52},
          {var,{222,52},'RecName'},
          {cons,{222,62},{var,{222,63},'_'},{nil,{222,64}}}}]}],
      [],
      [{tuple,
        {224,5},
        [{atom,{224,6},type},
         {call,
          {224,12},
          {remote,{224,20},{atom,{224,12},erl_anno},{atom,{224,21},set_file}},
          [{var,{224,30},'Filename'},{var,{224,40},'Anno'}]},
         {atom,{224,47},record},
         {var,{224,55},'RecName'}]}]},
     {clause,
      {225,1},
      [{var,{225,21},'Filename'},
       {tuple,
        {225,31},
        [{atom,{225,32},type},
         {var,{225,38},'Anno'},
         {var,{225,44},'T'},
         {var,{225,47},'Params'}]}],
      [[{call,{225,61},{atom,{225,61},is_list},[{var,{225,69},'Params'}]}]],
      [{tuple,
        {226,5},
        [{atom,{226,6},type},
         {var,{226,12},'Anno'},
         {var,{226,18},'T'},
         {lc,
          {226,21},
          {call,
           {226,23},
           {atom,{226,23},annotate_user_types},
           [{var,{226,43},'Filename'},{var,{226,53},'Param'}]},
          [{generate,
            {227,32},
            {var,{227,26},'Param'},
            {call,
             {227,36},
             {atom,{227,36},':::'},
             [{var,{227,48},'Params'},
              {string,{227,48},"[ type ( ) ]"}]}}]}]}]},
     {clause,
      {228,1},
      [{var,{228,21},'Filename'},
       {tuple,
        {228,31},
        [{atom,{228,32},ann_type},
         {var,{228,42},'Anno'},
         {cons,
          {228,48},
          {var,{228,49},'Var'},
          {cons,{228,54},{var,{228,54},'Type'},{nil,{228,58}}}}]}],
      [],
      [{match,
        {230,5},
        {var,{230,5},'Type'},
        {call,
         {230,13},
         {atom,{230,13},':::'},
         [{var,{230,25},'Type'},{string,{230,25},"type ( )"}]}},
       {tuple,
        {231,5},
        [{atom,{231,6},ann_type},
         {var,{231,16},'Anno'},
         {cons,
          {231,22},
          {var,{231,23},'Var'},
          {cons,
           {231,28},
           {call,
            {231,28},
            {atom,{231,28},annotate_user_type_},
            [{var,{231,48},'Filename'},{var,{231,58},'Type'}]},
           {nil,{231,63}}}}]}]},
     {clause,
      {232,1},
      [{var,{232,21},'_Filename'},{var,{232,32},'Type'}],
      [],
      [{var,{233,5},'Type'}]}]}]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{file:filename(), type()}",
                     "{file:filename(),\n           {user_type, anno(), type_name(), [abstract_type()]}}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["file:filename()","file:filename()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_variable()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["op","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_atom()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]}]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{remote_type,0,
                           [{atom,{217,27},file},{atom,{217,32},filename},[]]},
              {type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_atom,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_singleton_integer_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_variable,[]}]}]}}
{trace,<0.104.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     "{file:filename(), {type, anno(), record, none()}}",seen,
                     env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["file:filename()","file:filename()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable()",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{type, anno(), record, none()}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["union","record",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_character()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["record","record",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["[af_atom() | af_record_field_type()]","none()",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     "{file:filename(), {ann_type, anno(), none()}}",seen,
                     env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["file:filename()","file:filename()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,call,{typechecker,refine,["var","ann_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["integer","ann_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_character()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["char","ann_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["remote_type","ann_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_atom()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["atom","ann_type",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.104.0>,call,{typechecker,refine,["ann_type","ann_type",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["[af_anno() | abstract_type()]","none()",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.104.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     "{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.104.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.105.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {236,1},
    get_module_from_annotation,1,
    [{clause,
      {236,1},
      [{var,{236,28},'Anno'}],
      [],
      [{'case',
        {237,5},
        {call,
         {237,10},
         {remote,{237,18},{atom,{237,10},erl_anno},{atom,{237,19},file}},
         [{var,{237,24},'Anno'}]},
        [{clause,
          {238,9},
          [{var,{238,9},'File'}],
          [[{call,{238,19},{atom,{238,19},is_list},[{var,{238,27},'File'}]}]],
          [{match,
            {239,13},
            {var,{239,13},'Basename'},
            {call,
             {239,24},
             {remote,
              {239,32},
              {atom,{239,24},filename},
              {atom,{239,33},basename}},
             [{var,{239,42},'File'},{string,{239,48},".erl"}]}},
           {tuple,
            {240,13},
            [{atom,{240,14},ok},
             {call,
              {240,18},
              {atom,{240,18},list_to_existing_atom},
              [{call,
                {240,41},
                {atom,{240,41},':::'},
                [{var,{240,53},'Basename'},
                 {string,{240,53},"string ( )"}]}]}]}]},
         {clause,
          {241,9},
          [{atom,{241,9},undefined}],
          [],
          [{atom,{242,13},none}]}]}]}]}]}}
{trace,<0.105.0>,call,
       {typechecker,refine,["filename() | undefined","[any()]",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["filename()","[any()]",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["[char()]","[any()]",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,{typechecker,refine,["<<_:_*8>>","[any()]",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {type,0,binary,[{integer,0,0},{integer,0,8}]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,{typechecker,refine,["undefined","[any()]",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{atom,0,undefined},
              {type,0,binary,[{integer,0,0},{integer,0,8}]}]}}
{trace,<0.105.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{undefined | <<_:_*8>>}","{undefined}",seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,["undefined | <<_:_*8>>","undefined",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["<<_:_*8>>","undefined",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,{typechecker,refine,["undefined","undefined",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {type,0,binary,[{integer,0,0},{integer,0,8}]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,[{type,0,binary,[{integer,0,0},{integer,0,8}]}]}}
{trace,<0.105.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{erl_anno:anno()}","{erl_anno:anno()}",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.105.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.106.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {247,1},
    substitute_type_vars,2,
    [{clause,
      {247,1},
      [{tuple,
        {247,22},
        [{atom,{247,23},type},
         {var,{247,29},'L'},
         {atom,{247,32},'fun'},
         {cons,
          {247,39},
          {match,
           {247,40},
           {var,{247,40},'Any'},
           {tuple,
            {247,46},
            [{atom,{247,47},type},{var,{247,53},'_'},{atom,{247,56},any}]}},
          {cons,{247,62},{var,{247,62},'RetTy'},{nil,{247,67}}}}]},
       {var,{247,71},'TVars'}],
      [],
      [{match,
        {252,5},
        {var,{252,5},'RetTy'},
        {call,
         {252,14},
         {atom,{252,14},':::'},
         [{var,{252,26},'RetTy'},{string,{252,26},"type ( )"}]}},
       {tuple,
        {253,5},
        [{atom,{253,6},type},
         {var,{253,12},'L'},
         {atom,{253,15},'fun'},
         {cons,
          {253,22},
          {var,{253,23},'Any'},
          {cons,
           {253,28},
           {call,
            {253,28},
            {atom,{253,28},substitute_type_vars},
            [{var,{253,49},'RetTy'},{var,{253,56},'TVars'}]},
           {nil,{253,62}}}}]}]},
     {clause,
      {254,1},
      [{tuple,
        {254,22},
        [{var,{254,23},'Tag'},
         {var,{254,28},'L'},
         {var,{254,31},'T'},
         {var,{254,34},'Params'}]},
       {var,{254,43},'TVars'}],
      [[{op,
         {255,20},
         'orelse',
         {op,{255,12},'==',{var,{255,8},'Tag'},{atom,{255,15},type}},
         {op,{256,12},'==',{var,{256,8},'Tag'},{atom,{256,15},user_type}}},
        {call,{257,8},{atom,{257,8},is_list},[{var,{257,16},'Params'}]}]],
      [{tuple,
        {262,5},
        [{var,{262,6},'Tag'},
         {var,{262,11},'L'},
         {var,{262,14},'T'},
         {lc,
          {262,17},
          {call,
           {262,18},
           {atom,{262,18},substitute_type_vars},
           [{var,{262,39},'P'},{var,{262,42},'TVars'}]},
          [{generate,
            {262,54},
            {var,{262,52},'P'},
            {call,
             {262,58},
             {atom,{262,58},':::'},
             [{var,{262,70},'Params'},{string,{262,70},"list ( )"}]}}]}]}]},
     {clause,
      {263,1},
      [{tuple,
        {263,22},
        [{atom,{263,23},remote_type},
         {var,{263,36},'L'},
         {cons,
          {263,39},
          {var,{263,40},'M'},
          {cons,
           {263,43},
           {var,{263,43},'T'},
           {cons,{263,46},{var,{263,46},'Params'},{nil,{263,52}}}}}]},
       {var,{263,56},'TVars'}],
      [],
      [{tuple,
        {264,5},
        [{atom,{264,6},remote_type},
         {var,{264,19},'L'},
         {cons,
          {264,22},
          {var,{264,23},'M'},
          {cons,
           {264,26},
           {var,{264,26},'T'},
           {cons,
            {264,29},
            {lc,
             {264,29},
             {call,
              {264,30},
              {atom,{264,30},substitute_type_vars},
              [{var,{264,51},'P'},{var,{264,54},'TVars'}]},
             [{generate,{264,66},{var,{264,64},'P'},{var,{264,69},'Params'}}]},
            {nil,{264,76}}}}}]}]},
     {clause,
      {265,1},
      [{tuple,
        {265,22},
        [{atom,{265,23},ann_type},
         {var,{265,33},'L'},
         {cons,
          {265,36},
          {match,
           {265,37},
           {var,{265,37},'Var'},
           {tuple,
            {265,43},
            [{atom,{265,44},var},{var,{265,49},'_'},{var,{265,52},'_'}]}},
          {cons,{265,56},{var,{265,56},'Type'},{nil,{265,60}}}}]},
       {var,{265,64},'TVars'}],
      [],
      [{match,
        {267,5},
        {var,{267,5},'Type'},
        {call,
         {267,13},
         {atom,{267,13},':::'},
         [{var,{267,25},'Type'},{string,{267,25},"type ( )"}]}},
       {tuple,
        {268,5},
        [{atom,{268,6},ann_type},
         {var,{268,16},'L'},
         {cons,
          {268,19},
          {var,{268,20},'Var'},
          {cons,
           {268,25},
           {call,
            {268,25},
            {atom,{268,25},substitute_type_vars},
            [{var,{268,46},'Type'},{var,{268,52},'TVars'}]},
           {nil,{268,58}}}}]}]},
     {clause,
      {269,1},
      [{tuple,
        {269,22},
        [{atom,{269,23},var},{var,{269,28},'L'},{var,{269,31},'Var'}]},
       {var,{269,37},'TVars'}],
      [],
      [{'case',
        {270,5},
        {var,{270,10},'TVars'},
        [{clause,
          {271,9},
          [{map,
            {271,9},
            [{map_field_exact,
              {271,15},
              {var,{271,11},'Var'},
              {var,{271,18},'Type'}}]}],
          [],
          [{var,{271,27},'Type'}]},
         {clause,
          {272,9},
          [{var,{272,9},'_'}],
          [],
          [{tuple,
            {272,27},
            [{atom,{272,28},var},
             {var,{272,33},'L'},
             {var,{272,36},'Var'}]}]}]}]},
     {clause,
      {274,1},
      [{match,
        {274,22},
        {var,{274,22},'Other'},
        {tuple,
         {274,30},
         [{atom,{274,31},type},
          {var,{274,37},'_'},
          {var,{274,40},'T'},
          {atom,{274,43},any}]}},
       {var,{274,49},'_'}],
      [[{op,{275,10},'==',{var,{275,8},'T'},{atom,{275,13},tuple}}],
       [{op,{275,22},'==',{var,{275,20},'T'},{atom,{275,25},map}}]],
      [{var,{276,5},'Other'}]},
     {clause,
      {277,1},
      [{match,
        {277,22},
        {var,{277,22},'Other'},
        {tuple,
         {277,30},
         [{atom,{277,31},op},
          {var,{277,35},'_'},
          {var,{277,38},'_Op'},
          {var,{277,43},'_Arg'}]}},
       {var,{277,50},'_'}],
      [],
      [{var,{279,5},'Other'}]},
     {clause,
      {280,1},
      [{match,
        {280,22},
        {var,{280,22},'Other'},
        {tuple,
         {280,30},
         [{atom,{280,31},op},
          {var,{280,35},'_'},
          {var,{280,38},'_Op'},
          {var,{280,43},'_Arg1'},
          {var,{280,50},'_Arg2'}]}},
       {var,{280,58},'_'}],
      [],
      [{var,{282,5},'Other'}]},
     {clause,
      {283,1},
      [{match,
        {283,22},
        {var,{283,22},'Other'},
        {tuple,
         {283,30},
         [{var,{283,31},'T'},{var,{283,34},'_'},{var,{283,37},'_'}]}},
       {var,{283,41},'_'}],
      [[{op,{284,10},'==',{var,{284,8},'T'},{atom,{284,13},atom}}],
       [{op,{284,21},'==',{var,{284,19},'T'},{atom,{284,24},integer}}],
       [{op,{284,35},'==',{var,{284,33},'T'},{atom,{284,38},char}}]],
      [{var,{285,5},'Other'}]}]}]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{type, anno(), 'fun', none()}, #{atom() => type()}}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["type()","{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{type, anno(), 'fun', none()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["user_type","type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{type, anno(), 'fun', none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["union","'fun'",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["tuple","'fun'",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["tuple","'fun'",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["record","'fun'",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), 'fun', none()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["type_name()","'fun'",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{remote_type, anno(), none()}, #{atom() => type()}}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["type()","{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{remote_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{remote_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["var","remote_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["integer","remote_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["char","remote_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,["remote_type","remote_type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["[af_atom() | af_atom() | [abstract_type()]]","none()",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{ann_type, anno(), none()}, #{atom() => type()}}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,["type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["var","ann_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["integer","ann_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["char","ann_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,["remote_type","ann_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_atom()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["atom","ann_type",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["ann_type","ann_type",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["[af_anno() | abstract_type()]","none()",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{#{atom() => type()}}","{#{atom() := type()}}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() := type()}",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,map,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,[{type,0,map,[]}]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,{typechecker,refine,["{#{}}","{#{}}",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{var, anno(), gr_type_var()}, #{atom() => type()}}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["type()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["integer","var",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["char","var",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,call,{typechecker,refine,["remote_type","var",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_atom()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["atom","var",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["ann_type","var",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() => type()}",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_atom,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_singleton_integer_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_user_defined_type,[]}]},
              {type,0,map,
                    [{type,0,map_field_assoc,
                           [{type,0,atom,[]},{user_type,0,type,[]}]}]}]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_user_defined_type(),\n           #{atom() => type()}}",
                     "{{op, anno(), unary_op(), af_singleton_integer_type()},\n           #{atom() => type()}}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_user_defined_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["user_type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         gr_integer,[]}]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_atom()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         gr_integer,[]}]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() => type()}",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_atom,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_character,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  gr_integer,[]}]},
         {type,0,map,
             [{type,0,map_field_assoc,
                  [{type,0,atom,[]},{user_type,0,type,[]}]}]}]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_atom() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_character() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_user_defined_type() |\n           gr_integer(),\n           #{atom() => type()}}",
                     "{{op,\n            anno(),\n            binary_op(),\n            af_singleton_integer_type(),\n            af_singleton_integer_type()},\n           #{atom() => type()}}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_character() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_user_defined_type() |\n          gr_integer()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_atom()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         gr_integer,[]}]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() => type()}",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_atom,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_character,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_user_defined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                gr_integer,[]}]},
              {type,0,map,
                    [{type,0,map_field_assoc,
                           [{type,0,atom,[]},{user_type,0,type,[]}]}]}]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.107.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {326,1},
             reduce_type,3,
             [{clause,
                  {326,1},
                  [{var,{326,13},'Fun'},
                   {var,{326,18},'Acc'},
                   {var,{326,23},'Type'}],
                  [],
                  [{call,
                       {327,5},
                       {atom,{327,5},reduce},
                       [{var,{327,12},'Fun'},
                        {atom,{327,17},apply},
                        {var,{327,24},'Acc'},
                        {var,{327,29},'Type'}]}]}]}]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_57) ->\n                   {walkable_type(), Acc_typechecker_3529_57}),\n           Acc_typechecker_3529_57,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_57) ->\n                   {walkable_type(), Acc_typechecker_3529_57}),\n           Acc_typechecker_3529_57,\n           walkable_type()}",
                     seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.107.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.108.0>,call,
    {typechecker,type_check_function,
        [env,
         {function,
             {333,1},
             reduce,4,
             [{clause,
                  {333,1},
                  [{var,{333,8},'Fun'},
                   {var,{333,13},'_'},
                   {var,{333,16},'Acc'},
                   {match,
                       {333,21},
                       {tuple,
                           {333,21},
                           [{atom,{333,22},atom},
                            {var,{333,30},'_'},
                            {var,{333,33},'_'}]},
                       {var,{333,38},'Ty'}}],
                  [],
                  [{call,
                       {333,58},
                       {var,{333,58},'Fun'},
                       [{var,{333,62},'Ty'},{var,{333,66},'Acc'}]}]},
              {clause,
                  {334,1},
                  [{var,{334,8},'Fun'},
                   {var,{334,13},'_'},
                   {var,{334,16},'Acc'},
                   {match,
                       {334,21},
                       {tuple,
                           {334,21},
                           [{atom,{334,22},type},
                            {var,{334,30},'_Anno'},
                            {var,{334,37},'_Name'},
                            {atom,{334,44},any}]},
                       {var,{334,51},'Ty'}}],
                  [],
                  [{call,
                       {334,58},
                       {var,{334,58},'Fun'},
                       [{var,{334,62},'Ty'},{var,{334,66},'Acc'}]}]},
              {clause,
                  {335,1},
                  [{var,{335,8},'Fun'},
                   {var,{335,13},'_'},
                   {var,{335,16},'Acc'},
                   {match,
                       {335,21},
                       {tuple,
                           {335,21},
                           [{atom,{335,22},integer},
                            {var,{335,33},'_'},
                            {var,{335,36},'_'}]},
                       {var,{335,41},'Ty'}}],
                  [],
                  [{call,
                       {335,58},
                       {var,{335,58},'Fun'},
                       [{var,{335,62},'Ty'},{var,{335,66},'Acc'}]}]},
              {clause,
                  {336,1},
                  [{var,{336,8},'Fun'},
                   {var,{336,13},'_'},
                   {var,{336,16},'Acc'},
                   {match,
                       {336,21},
                       {tuple,
                           {336,21},
                           [{atom,{336,22},char},
                            {var,{336,30},'_'},
                            {var,{336,33},'_'}]},
                       {var,{336,38},'Ty'}}],
                  [],
                  [{call,
                       {336,58},
                       {var,{336,58},'Fun'},
                       [{var,{336,62},'Ty'},{var,{336,66},'Acc'}]}]},
              {clause,
                  {337,1},
                  [{var,{337,8},'Fun'},
                   {var,{337,13},'_'},
                   {var,{337,16},'Acc'},
                   {match,
                       {337,21},
                       {tuple,
                           {337,21},
                           [{atom,{337,22},type},
                            {var,{337,30},'_Anno'},
                            {atom,{337,37},any}]},
                       {var,{337,44},'Ty'}}],
                  [],
                  [{call,
                       {337,58},
                       {var,{337,58},'Fun'},
                       [{var,{337,62},'Ty'},{var,{337,66},'Acc'}]}]},
              {clause,
                  {338,1},
                  [{var,{338,8},'Fun'},
                   {var,{338,13},'_'},
                   {var,{338,16},'Acc'},
                   {match,
                       {338,21},
                       {atom,{338,21},pos_inf},
                       {var,{338,31},'Ty'}}],
                  [],
                  [{call,
                       {338,58},
                       {var,{338,58},'Fun'},
                       [{var,{338,62},'Ty'},{var,{338,66},'Acc'}]}]},
              {clause,
                  {339,1},
                  [{var,{339,8},'Fun'},
                   {var,{339,13},'_'},
                   {var,{339,16},'Acc'},
                   {match,
                       {339,21},
                       {atom,{339,21},neg_inf},
                       {var,{339,31},'Ty'}}],
                  [],
                  [{call,
                       {339,58},
                       {var,{339,58},'Fun'},
                       [{var,{339,62},'Ty'},{var,{339,66},'Acc'}]}]},
              {clause,
                  {340,1},
                  [{var,{340,8},'Fun'},
                   {var,{340,13},'_'},
                   {var,{340,16},'Acc'},
                   {match,
                       {340,21},
                       {tuple,
                           {340,21},
                           [{atom,{340,22},var},
                            {var,{340,27},'_'},
                            {var,{340,30},'_'}]},
                       {var,{340,35},'Ty'}}],
                  [],
                  [{call,
                       {340,58},
                       {var,{340,58},'Fun'},
                       [{var,{340,62},'Ty'},{var,{340,66},'Acc'}]}]},
              {clause,
                  {341,1},
                  [{var,{341,8},'Fun'},
                   {atom,{341,13},apply},
                   {var,{341,20},'Acc'},
                   {var,{341,25},'Ty'}],
                  [],
                  [{match,
                       {342,5},
                       {tuple,
                           {342,5},
                           [{var,{342,6},'NewTy'},{var,{342,13},'Acc1'}]},
                       {call,
                           {342,21},
                           {var,{342,21},'Fun'},
                           [{var,{342,25},'Ty'},{var,{342,29},'Acc'}]}},
                   {call,
                       {343,5},
                       {atom,{343,5},reduce},
                       [{var,{343,12},'Fun'},
                        {atom,{343,17},recurse},
                        {var,{343,26},'Acc1'},
                        {var,{343,32},'NewTy'}]}]},
              {clause,
                  {344,1},
                  [{var,{344,8},'Fun'},
                   {atom,{344,13},recurse},
                   {var,{344,22},'Acc'},
                   {tuple,
                       {344,27},
                       [{atom,{344,28},op},
                        {var,{344,34},'_'},
                        {var,{344,37},'_'},
                        {var,{344,40},'Ty1'}]}],
                  [],
                  [{call,
                       {344,66},
                       {atom,{344,66},reduce_rec},
                       [{var,{344,77},'Fun'},
                        {var,{344,82},'Acc'},
                        {cons,
                            {344,87},
                            {var,{344,88},'Ty1'},
                            {nil,{344,91}}}]}]},
              {clause,
                  {345,1},
                  [{var,{345,8},'Fun'},
                   {atom,{345,13},recurse},
                   {var,{345,22},'Acc'},
                   {tuple,
                       {345,27},
                       [{atom,{345,28},op},
                        {var,{345,34},'_'},
                        {var,{345,37},'_'},
                        {var,{345,40},'Ty1'},
                        {var,{345,45},'Ty2'}]}],
                  [],
                  [{call,
                       {345,66},
                       {atom,{345,66},reduce_rec},
                       [{var,{345,77},'Fun'},
                        {var,{345,82},'Acc'},
                        {cons,
                            {345,87},
                            {var,{345,88},'Ty1'},
                            {cons,
                                {345,93},
                                {var,{345,93},'Ty2'},
                                {nil,{345,96}}}}]}]},
              {clause,
                  {346,1},
                  [{var,{346,8},'Fun'},
                   {atom,{346,13},recurse},
                   {var,{346,22},'Acc'},
                   {tuple,
                       {346,27},
                       [{atom,{346,28},ann_type},
                        {var,{346,40},'_Anno'},
                        {var,{346,47},'Args'}]}],
                  [],
                  [{call,
                       {346,66},
                       {atom,{346,66},reduce_rec},
                       [{var,{346,77},'Fun'},
                        {var,{346,82},'Acc'},
                        {var,{346,87},'Args'}]}]},
              {clause,
                  {347,1},
                  [{var,{347,8},'Fun'},
                   {atom,{347,13},recurse},
                   {var,{347,22},'Acc'},
                   {tuple,
                       {347,27},
                       [{atom,{347,28},type},
                        {var,{347,36},'_Anno'},
                        {var,{347,43},'_Name'},
                        {var,{347,50},'Args'}]}],
                  [],
                  [{call,
                       {347,66},
                       {atom,{347,66},reduce_rec},
                       [{var,{347,77},'Fun'},
                        {var,{347,82},'Acc'},
                        {var,{347,87},'Args'}]}]},
              {clause,
                  {348,1},
                  [{var,{348,8},'Fun'},
                   {atom,{348,13},recurse},
                   {var,{348,22},'Acc'},
                   {tuple,
                       {348,27},
                       [{atom,{348,28},remote_type},
                        {var,{348,43},'_Anno'},
                        {cons,
                            {348,50},
                            {var,{348,51},'M'},
                            {cons,
                                {348,54},
                                {var,{348,54},'T'},
                                {cons,
                                    {348,57},
                                    {var,{348,57},'As'},
                                    {nil,{348,59}}}}}]}],
                  [],
                  [{call,
                       {348,66},
                       {atom,{348,66},reduce_rec},
                       [{var,{348,77},'Fun'},
                        {var,{348,82},'Acc'},
                        {cons,
                            {348,87},
                            {var,{348,88},'M'},
                            {cons,
                                {348,91},
                                {var,{348,91},'T'},
                                {var,{348,95},'As'}}}]}]},
              {clause,
                  {349,1},
                  [{var,{349,8},'Fun'},
                   {atom,{349,13},recurse},
                   {var,{349,22},'Acc'},
                   {tuple,
                       {349,27},
                       [{atom,{349,28},user_type},
                        {var,{349,41},'_Anno'},
                        {var,{349,48},'_Name'},
                        {var,{349,55},'Args'}]}],
                  [],
                  [{call,
                       {349,66},
                       {atom,{349,66},reduce_rec},
                       [{var,{349,77},'Fun'},
                        {var,{349,82},'Acc'},
                        {var,{349,87},'Args'}]}]}]}]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {atom, anno(), atom()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           none()}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {integer, anno(), integer()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {char, anno(), char()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {type, _, any}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59, pos_inf}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59, neg_inf}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {var, anno(), gr_type_var()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply, Acc_typechecker_3529_59,\n           walkable_type()}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","apply",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","apply",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","apply",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,recurse}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {op, anno(), unary_op(), af_singleton_integer_type()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {op,\n            anno(),\n            binary_op(),\n            af_singleton_integer_type(),\n            af_singleton_integer_type()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {ann_type, anno(), [af_anno() | abstract_type()]}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           none()}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {remote_type, anno(), none()}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {user_type, anno(), type_name(), [abstract_type()]}}",
                     seen,env]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.108.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.108.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.109.0>,call,
 {typechecker,type_check_function,
  [env,
   {function,
    {351,1},
    reduce_rec,3,
    [{clause,
      {351,1},
      [{var,{351,12},'Fun'},{var,{351,17},'Acc'},{var,{351,22},'Args'}],
      [],
      [{call,
        {352,5},
        {remote,{352,10},{atom,{352,5},lists},{atom,{352,11},foldl}},
        [{'fun',
          {352,17},
          {clauses,
           [{clause,
             {352,21},
             [{var,{352,22},'Arg'},
              {tuple,{352,27},[{var,{352,28},'_'},{var,{352,31},'Acc1'}]}],
             [],
             [{call,
               {353,25},
               {atom,{353,25},reduce},
               [{var,{353,32},'Fun'},
                {atom,{353,37},apply},
                {var,{353,44},'Acc1'},
                {var,{353,50},'Arg'}]}]}]}},
         {tuple,{354,22},[{atom,{354,23},ok},{var,{354,27},'Acc'}]},
         {var,{354,33},'Args'}]}]}]}]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{T_typechecker_3529_61, Acc_typechecker_3529_62}",
                     "{T_typechecker_3529_61,\n           {Acc_typechecker_3529_62_typechecker_1257_63,\n            Acc_typechecker_3529_62_typechecker_1257_64}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["T_typechecker_3529_61","T_typechecker_3529_61",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{any(), any(), any()}","{any(), any(), any()}",seen,
                     env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,return_to,{typechecker,type_check_form,5}}
src/typelib.erl: Nonexhaustive patterns on line 114 at column 1
Example values which are not covered:
	{op, Opaque3, '/', {integer, Opaque35, 0}, {integer, Opaque67, 0}}
