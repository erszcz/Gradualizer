{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [#{},
                     {[{user_type,0,af_constraint,[]}],
                      {user_type,0,af_constraint,[]}},
                     "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] =>
                           [{user_type,0,af_constraint,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_constraint()}","{af_constraint()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [#{{[{user_type,0,af_constraint,[]}],
                        "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
                           true},
                     {[{user_type,0,type,[]}],{user_type,0,type,[]}},
                     "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type()}",
                     "{{type, anno(), constraint, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["type()","{type, anno(), constraint, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["user_type","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [#{{[{user_type,0,af_constraint,[]}],
                        "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
                           true,
                       {[{user_type,0,type,[]}],
                        "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
                           true},
                     {[{user_type,0,type,[]}],{user_type,0,type,[]}},
                     "fun({atom = Type, _, Value}) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,["{type()}","{{atom, anno(), atom()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["char","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,["af_atom()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_singleton_integer_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_variable,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({integer = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_user_defined_type()}",
                     "{{integer, anno(), integer()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_user_defined_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["char","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_character,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_variable,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({char = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_character() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{char, anno(), char()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_character() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{char, anno(), char()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{char, anno(), char()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_variable,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({var = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{var, anno(), gr_type_var()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","var",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","var",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({user_type, Anno, Name, Params}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{user_type, anno(), type_name(), [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type,\n            anno(),\n            record,\n            [{atom, anno(), atom()} |\n             {type,\n              anno(),\n              field_type,\n              [{atom, anno(), atom()} |\n               af_annotated_type() |\n               af_atom() |\n               af_bitstring_type() |\n               af_constrained_function_type() |\n               af_empty_list_type() |\n               af_fun_type() |\n               af_integer_range_type() |\n               af_map_type() |\n               af_predefined_type() |\n               af_record_type() |\n               af_remote_type() |\n               af_singleton_integer_type() |\n               af_tuple_type() |\n               af_type_union() |\n               af_type_variable() |\n               af_user_defined_type()]},\n             ...]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","record",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["[af_atom() | af_record_field_type()]",
                     "[{atom, anno(), atom()} |\n           {type,\n            anno(),\n            field_type,\n            [{atom, anno(), atom()} |\n             af_annotated_type() |\n             af_atom() |\n             af_bitstring_type() |\n             af_constrained_function_type() |\n             af_empty_list_type() |\n             af_fun_type() |\n             af_integer_range_type() |\n             af_map_type() |\n             af_predefined_type() |\n             af_record_type() |\n             af_remote_type() |\n             af_singleton_integer_type() |\n             af_tuple_type() |\n             af_type_union() |\n             af_type_variable() |\n             af_user_defined_type()]},\n           ...]",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_atom() | af_record_field_type()",
                     "{atom, anno(), atom()} |\n          {type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_field_type()",
                     "{atom, anno(), atom()} |\n          {type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), field_type, [af_atom() | abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-7-',4}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), field_type, [af_atom() | abstract_type()]}",
                     "{type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["field_type","field_type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["[af_atom() | abstract_type()]",
                     "[{atom, anno(), atom()} |\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_user_defined_type()]",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-7-',4}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), field_type, none()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, tuple = Type, any}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), tuple, any}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","tuple",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["[abstract_type()]","any",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{atom,0,type},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],anno,[]},
              {atom,0,tuple},
              {type,0,list,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                abstract_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map = Type, any}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map, any}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{type, anno(), map, any}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), map, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, 'fun', _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), 'fun', []}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), 'fun', []}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), 'fun', []}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), 'fun', []}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","'fun'",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), 'fun', []}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), 'fun', []}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","'fun'",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{type, anno(), 'fun', []}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","'fun'",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), 'fun', []}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), 'fun', []}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","'fun'",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), 'fun', []}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","'fun'",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, any, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), any, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), any, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), any, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), any, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","any",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), any, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), any, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","any",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), any, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","any",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), any, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), any, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","any",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), any, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","any",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, arity, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), arity, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), arity, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), arity, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), arity, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","arity",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), arity, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), arity, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","arity",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), arity, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","arity",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), arity, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), arity, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","arity",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), arity, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","arity",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, atom, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), atom, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), atom, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), atom, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), atom, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), atom, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), atom, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), atom, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), atom, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), atom, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), atom, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, binary, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type,\n            anno(),\n            binary,\n            [af_binary_op(af_singleton_integer_type()) |\n             af_character() |\n             af_unary_op(af_singleton_integer_type()) |\n             gr_integer()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           binary,\n           [af_binary_op(af_singleton_integer_type()) |\n            af_character() |\n            af_unary_op(af_singleton_integer_type()) |\n            gr_integer()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           binary,\n           [af_binary_op(af_singleton_integer_type()) |\n            af_character() |\n            af_unary_op(af_singleton_integer_type()) |\n            gr_integer()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type,\n           anno(),\n           binary,\n           [af_binary_op(af_singleton_integer_type()) |\n            af_character() |\n            af_unary_op(af_singleton_integer_type()) |\n            gr_integer()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","binary",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type,\n           anno(),\n           binary,\n           [af_binary_op(af_singleton_integer_type()) |\n            af_character() |\n            af_unary_op(af_singleton_integer_type()) |\n            gr_integer()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type,\n           anno(),\n           binary,\n           [af_binary_op(af_singleton_integer_type()) |\n            af_character() |\n            af_unary_op(af_singleton_integer_type()) |\n            gr_integer()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","binary",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type,\n           anno(),\n           binary,\n           [af_binary_op(af_singleton_integer_type()) |\n            af_character() |\n            af_unary_op(af_singleton_integer_type()) |\n            gr_integer()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","binary",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type,\n           anno(),\n           binary,\n           [af_binary_op(af_singleton_integer_type()) |\n            af_character() |\n            af_unary_op(af_singleton_integer_type()) |\n            gr_integer()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type,\n           anno(),\n           binary,\n           [af_binary_op(af_singleton_integer_type()) |\n            af_character() |\n            af_unary_op(af_singleton_integer_type()) |\n            gr_integer()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","binary",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type,\n           anno(),\n           binary,\n           [af_binary_op(af_singleton_integer_type()) |\n            af_character() |\n            af_unary_op(af_singleton_integer_type()) |\n            gr_integer()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","binary",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, bitstring, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), bitstring, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), bitstring, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), bitstring, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), bitstring, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","bitstring",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), bitstring, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), bitstring, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","bitstring",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), bitstring, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","bitstring",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), bitstring, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), bitstring, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","bitstring",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), bitstring, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","bitstring",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, boolean, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), boolean, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), boolean, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), boolean, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), boolean, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","boolean",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), boolean, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), boolean, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","boolean",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), boolean, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","boolean",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), boolean, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), boolean, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","boolean",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), boolean, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","boolean",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type,\n            anno(),\n            bounded_fun,\n            [{type, anno(), 'fun', [any()]} |\n             {type, anno(), 'fun', [none()]} |\n             {type, anno(), 'fun', []} |\n             {type,\n              anno(),\n              'fun',\n              [{type, anno(), product, [abstract_type()]} |\n               abstract_type()]}]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type, anno(), 'fun', []} |\n            {type,\n             anno(),\n             'fun',\n             [{type, anno(), product, [abstract_type()]} |\n              abstract_type()]}]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type, anno(), 'fun', []} |\n            {type,\n             anno(),\n             'fun',\n             [{type, anno(), product, [abstract_type()]} |\n              abstract_type()]}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type, anno(), 'fun', []} |\n            {type,\n             anno(),\n             'fun',\n             [{type, anno(), product, [abstract_type()]} |\n              abstract_type()]}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","bounded_fun",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type, anno(), 'fun', []} |\n            {type,\n             anno(),\n             'fun',\n             [{type, anno(), product, [abstract_type()]} |\n              abstract_type()]}]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type, anno(), 'fun', []} |\n            {type,\n             anno(),\n             'fun',\n             [{type, anno(), product, [abstract_type()]} |\n              abstract_type()]}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","bounded_fun",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type, anno(), 'fun', []} |\n            {type,\n             anno(),\n             'fun',\n             [{type, anno(), product, [abstract_type()]} |\n              abstract_type()]}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","bounded_fun",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type, anno(), 'fun', []} |\n            {type,\n             anno(),\n             'fun',\n             [{type, anno(), product, [abstract_type()]} |\n              abstract_type()]}]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type, anno(), 'fun', []} |\n            {type,\n             anno(),\n             'fun',\n             [{type, anno(), product, [abstract_type()]} |\n              abstract_type()]}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","bounded_fun",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type, anno(), 'fun', []} |\n            {type,\n             anno(),\n             'fun',\n             [{type, anno(), product, [abstract_type()]} |\n              abstract_type()]}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","bounded_fun",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, byte, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), byte, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), byte, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), byte, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), byte, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","byte",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), byte, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), byte, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","byte",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), byte, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","byte",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), byte, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), byte, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","byte",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), byte, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","byte",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, char, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), char, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), char, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), char, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), char, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), char, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), char, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), char, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), char, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), char, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), char, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, float, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), float, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), float, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), float, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), float, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","float",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), float, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), float, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","float",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), float, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","float",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), float, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), float, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","float",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), float, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","float",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, function, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), function, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), function, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), function, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), function, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","function",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), function, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), function, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","function",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), function, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","function",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), function, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), function, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","function",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), function, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","function",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, integer, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), integer, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), integer, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), integer, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), integer, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), integer, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), integer, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), integer, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), integer, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), integer, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), integer, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, iodata, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), iodata, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), iodata, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), iodata, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), iodata, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","iodata",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), iodata, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), iodata, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","iodata",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), iodata, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","iodata",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), iodata, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), iodata, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","iodata",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), iodata, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","iodata",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, iolist, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), iolist, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), iolist, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), iolist, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), iolist, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","iolist",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), iolist, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), iolist, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","iolist",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), iolist, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","iolist",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), iolist, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), iolist, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","iolist",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), iolist, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","iolist",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, list, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), list, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), list, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), list, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), list, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), list, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), list, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), list, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), list, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), list, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), list, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{none()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "none()",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), maybe_improper_list, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), maybe_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), maybe_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), maybe_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","maybe_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), maybe_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), maybe_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","maybe_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), maybe_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","maybe_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), maybe_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), maybe_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","maybe_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), maybe_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","maybe_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, mfa, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), mfa, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), mfa, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), mfa, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), mfa, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","mfa",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), mfa, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), mfa, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","mfa",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), mfa, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","mfa",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), mfa, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), mfa, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","mfa",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), mfa, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","mfa",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, module, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), module, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), module, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), module, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), module, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","module",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), module, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), module, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","module",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), module, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","module",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), module, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), module, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","module",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), module, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","module",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), neg_integer, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), neg_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), neg_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), neg_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","neg_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), neg_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), neg_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","neg_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), neg_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","neg_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), neg_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), neg_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","neg_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), neg_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","neg_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, nil, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), nil, []}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), nil, []}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), nil, []}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), nil, []}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","nil",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), nil, []}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), nil, []}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","nil",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{type, anno(), nil, []}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","nil",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), nil, []}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), nil, []}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","nil",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), nil, []}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","nil",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, no_return, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), no_return, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), no_return, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), no_return, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), no_return, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","no_return",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), no_return, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), no_return, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","no_return",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), no_return, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","no_return",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), no_return, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), no_return, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","no_return",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), no_return, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","no_return",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, node, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), node, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), node, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), node, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), node, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","node",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), node, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), node, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","node",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), node, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","node",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), node, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), node, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","node",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), node, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","node",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), non_neg_integer, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), non_neg_integer, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), non_neg_integer, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), non_neg_integer, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","non_neg_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), non_neg_integer, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), non_neg_integer, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","non_neg_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), non_neg_integer, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","non_neg_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), non_neg_integer, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), non_neg_integer, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","non_neg_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), non_neg_integer, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","non_neg_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, none, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), none, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), none, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), none, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), none, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","none",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), none, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), none, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","none",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), none, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","none",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), none, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), none, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","none",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), none, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","none",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), nonempty_improper_list, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), nonempty_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), nonempty_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), nonempty_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","nonempty_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), nonempty_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), nonempty_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","nonempty_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), nonempty_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","nonempty_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), nonempty_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), nonempty_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","nonempty_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), nonempty_improper_list, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","nonempty_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), nonempty_list, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), nonempty_list, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), nonempty_list, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), nonempty_list, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","nonempty_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), nonempty_list, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), nonempty_list, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","nonempty_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), nonempty_list, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","nonempty_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), nonempty_list, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), nonempty_list, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","nonempty_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), nonempty_list, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","nonempty_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type,\n            anno(),\n            nonempty_maybe_improper_list,\n            [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           nonempty_maybe_improper_list,\n           [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           nonempty_maybe_improper_list,\n           [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type,\n           anno(),\n           nonempty_maybe_improper_list,\n           [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","nonempty_maybe_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type,\n           anno(),\n           nonempty_maybe_improper_list,\n           [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type,\n           anno(),\n           nonempty_maybe_improper_list,\n           [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","nonempty_maybe_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type,\n           anno(),\n           nonempty_maybe_improper_list,\n           [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","nonempty_maybe_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type,\n           anno(),\n           nonempty_maybe_improper_list,\n           [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type,\n           anno(),\n           nonempty_maybe_improper_list,\n           [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["record","nonempty_maybe_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type,\n           anno(),\n           nonempty_maybe_improper_list,\n           [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["type_name()","nonempty_maybe_improper_list",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, number, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), number, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), number, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), number, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), number, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","number",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), number, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), number, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","number",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), number, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","number",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), number, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), number, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","number",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), number, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","number",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, pid, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), pid, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), pid, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), pid, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), pid, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","pid",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), pid, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), pid, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","pid",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), pid, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","pid",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), pid, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), pid, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","pid",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), pid, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","pid",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, port, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), port, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), port, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), port, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), port, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","port",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), port, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), port, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","port",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), port, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","port",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), port, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), port, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","port",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), port, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","port",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), pos_integer, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), pos_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), pos_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), pos_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","pos_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), pos_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), pos_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","pos_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), pos_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","pos_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), pos_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), pos_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","pos_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), pos_integer, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","pos_integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, product, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), product, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), product, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), product, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), product, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","product",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), product, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), product, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","product",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), product, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","product",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), product, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), product, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","product",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), product, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","product",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, range, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type,\n            anno(),\n            range,\n            [{char, anno(), char()} |\n             {integer, anno(), integer()} |\n             {op,\n              anno(),\n              binary_op(),\n              af_singleton_integer_type(),\n              af_singleton_integer_type()} |\n             {op, anno(), unary_op(), af_singleton_integer_type()}]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           range,\n           [{char, anno(), char()} |\n            {integer, anno(), integer()} |\n            {op,\n             anno(),\n             binary_op(),\n             af_singleton_integer_type(),\n             af_singleton_integer_type()} |\n            {op, anno(), unary_op(), af_singleton_integer_type()}]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           range,\n           [{char, anno(), char()} |\n            {integer, anno(), integer()} |\n            {op,\n             anno(),\n             binary_op(),\n             af_singleton_integer_type(),\n             af_singleton_integer_type()} |\n            {op, anno(), unary_op(), af_singleton_integer_type()}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type,\n           anno(),\n           range,\n           [{char, anno(), char()} |\n            {integer, anno(), integer()} |\n            {op,\n             anno(),\n             binary_op(),\n             af_singleton_integer_type(),\n             af_singleton_integer_type()} |\n            {op, anno(), unary_op(), af_singleton_integer_type()}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","range",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type,\n           anno(),\n           range,\n           [{char, anno(), char()} |\n            {integer, anno(), integer()} |\n            {op,\n             anno(),\n             binary_op(),\n             af_singleton_integer_type(),\n             af_singleton_integer_type()} |\n            {op, anno(), unary_op(), af_singleton_integer_type()}]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type,\n           anno(),\n           range,\n           [{char, anno(), char()} |\n            {integer, anno(), integer()} |\n            {op,\n             anno(),\n             binary_op(),\n             af_singleton_integer_type(),\n             af_singleton_integer_type()} |\n            {op, anno(), unary_op(), af_singleton_integer_type()}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","range",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type,\n           anno(),\n           range,\n           [{char, anno(), char()} |\n            {integer, anno(), integer()} |\n            {op,\n             anno(),\n             binary_op(),\n             af_singleton_integer_type(),\n             af_singleton_integer_type()} |\n            {op, anno(), unary_op(), af_singleton_integer_type()}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","range",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type,\n           anno(),\n           range,\n           [{char, anno(), char()} |\n            {integer, anno(), integer()} |\n            {op,\n             anno(),\n             binary_op(),\n             af_singleton_integer_type(),\n             af_singleton_integer_type()} |\n            {op, anno(), unary_op(), af_singleton_integer_type()}]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type,\n           anno(),\n           range,\n           [{char, anno(), char()} |\n            {integer, anno(), integer()} |\n            {op,\n             anno(),\n             binary_op(),\n             af_singleton_integer_type(),\n             af_singleton_integer_type()} |\n            {op, anno(), unary_op(), af_singleton_integer_type()}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","range",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type,\n           anno(),\n           range,\n           [{char, anno(), char()} |\n            {integer, anno(), integer()} |\n            {op,\n             anno(),\n             binary_op(),\n             af_singleton_integer_type(),\n             af_singleton_integer_type()} |\n            {op, anno(), unary_op(), af_singleton_integer_type()}]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","range",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, reference, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), reference, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), reference, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), reference, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), reference, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","reference",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), reference, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), reference, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","reference",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), reference, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","reference",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), reference, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), reference, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","reference",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), reference, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","reference",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, string, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), string, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), string, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), string, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), string, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","string",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), string, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), string, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","string",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), string, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","string",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), string, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), string, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","string",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), string, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","string",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, term, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), term, [abstract_type()]}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), term, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), term, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), term, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","term",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), term, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), term, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","term",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), term, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","term",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), term, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), term, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","term",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), term, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","term",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, term, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, timeout, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), timeout, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), timeout, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), timeout, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), timeout, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","timeout",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), timeout, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), timeout, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","timeout",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), timeout, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","timeout",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), timeout, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), timeout, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","timeout",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), timeout, [abstract_type()]}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","timeout",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, term, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, timeout, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, tuple, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{none()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "none()",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, term, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, timeout, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, union, _} = Type) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type,\n            anno(),\n            union,\n            [af_annotated_type() |\n             af_atom() |\n             af_bitstring_type() |\n             af_constrained_function_type() |\n             af_empty_list_type() |\n             af_fun_type() |\n             af_integer_range_type() |\n             af_map_type() |\n             af_predefined_type() |\n             af_record_type() |\n             af_remote_type() |\n             af_singleton_integer_type() |\n             af_tuple_type() |\n             af_type_union() |\n             af_type_variable() |\n             af_user_defined_type(),\n             ...]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           union,\n           [af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type(),\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           union,\n           [af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type(),\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type,\n           anno(),\n           union,\n           [af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type(),\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","union",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["[abstract_type(), ...]",
                     "[af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_user_defined_type(),\n           ...]",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["abstract_type()",
                     "af_annotated_type() |\n          af_atom() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_user_defined_type()",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,refine_ty,4}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type,\n           anno(),\n           union,\n           [af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type(),\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type,\n           anno(),\n           union,\n           [af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type(),\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","union",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type,\n           anno(),\n           union,\n           [af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type(),\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","union",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type,\n           anno(),\n           union,\n           [af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type(),\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type,\n           anno(),\n           union,\n           [af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type(),\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","union",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type,\n           anno(),\n           union,\n           [af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type(),\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","union",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, term, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, union, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, timeout, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map_field_exact = Assoc, Tys}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map_field_exact, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, term, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, union, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_exact = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, timeout, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map_field_assoc = Assoc, Tys}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map_field_assoc, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, term, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, union, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_exact = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, timeout, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_assoc = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({remote_type, _, _} = RemoteType) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{remote_type,\n            anno(),\n            [af_atom() | af_atom() | [abstract_type()]]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","remote_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, term, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, union, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_exact = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, timeout, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({remote_type, _, _} = RemoteType) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_assoc = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({ann_type, _, _} = AnnType) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{ann_type, anno(), [af_anno() | abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, term, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, union, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_exact = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({ann_type, _, _} = AnnType) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, timeout, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({remote_type, _, _} = RemoteType) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_assoc = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({op, _, _Op, _Type} = UnOp) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{op, anno(), unary_op(), af_singleton_integer_type()}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, term, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, union, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_exact = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({ann_type, _, _} = AnnType) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, timeout, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({remote_type, _, _} = RemoteType) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({op, _, _Op, _Type} = UnOp) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_assoc = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({op, _, _Op, _Type1, _Type2} = BinOp) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_tuple_type() |\n           af_type_union()}",
                     "{{op,\n            anno(),\n            binary_op(),\n            af_singleton_integer_type(),\n            af_singleton_integer_type()}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_tuple_type() |\n          af_type_union()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, term, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({op, _, _Op, _Type1, _Type2} = BinOp) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, union, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_exact = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({ann_type, _, _} = AnnType) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, timeout, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({remote_type, _, _} = RemoteType) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({op, _, _Op, _Type} = UnOp) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_assoc = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "no_clause",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]}]}]}]}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [#{{[{user_type,0,type,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, arity, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bounded_fun, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, 'fun', _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, function, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, none, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, term, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, tuple, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({user_type, Anno, Name, Params}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, no_return, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, byte, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, atom, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, reference, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nil, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,af_constraint,[]}],
            "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({op, _, _Op, _Type1, _Type2} = BinOp) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, union, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, char, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_exact = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, any, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, mfa, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, range, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, product, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, number, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({ann_type, _, _} = AnnType) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, port, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, nonempty_maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iodata, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, timeout, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({remote_type, _, _} = RemoteType) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, module, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, string, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map = Type, any}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({op, _, _Op, _Type} = UnOp) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, maybe_improper_list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pid, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, list, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, map_field_assoc = Assoc, Tys}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, non_neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, node, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, iolist, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, pos_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, neg_integer, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({char = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, binary, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, float, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, bitstring, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({atom = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({type, _, boolean, _} = Type) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({var = Type, _, Value}) ->\n       ok\nend"} =>
               true,
           {[{user_type,0,type,[]}],
            "fun({integer = Type, _, Value}) ->\n       ok\nend"} =>
               true},
         {[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_check_form,5}}
