{trace,<0.90.0>,call,
    {typechecker,type_check_function,
        [{venv,#{}},
         {function,
             {33,1},
             '::',2,
             [{clause,
                  {33,1},
                  [{var,{33,6},'Expr'},{var,{33,12},'_Type'}],
                  [],
                  [{var,{33,22},'Expr'}]}]}]}}
{trace,<0.90.0>,call,
       {typechecker,refine,["{any(), any()}","{any(), any()}",seen,env]}}
{trace,<0.90.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.90.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.90.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.91.0>,call,
    {typechecker,type_check_function,
        [{venv,#{}},
         {function,
             {36,1},
             ':::',2,
             [{clause,
                  {36,1},
                  [{var,{36,7},'Expr'},{var,{36,13},'_Type'}],
                  [],
                  [{var,{36,23},'Expr'}]}]}]}}
{trace,<0.91.0>,call,
       {typechecker,refine,["{any(), any()}","{any(), any()}",seen,env]}}
{trace,<0.91.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.91.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.91.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.92.0>,call,
 {typechecker,type_check_function,
  [{venv,#{}},
   {function,
    {42,1},
    pp_type,1,
    [{clause,
      {42,1},
      [{match,
        {42,9},
        {var,{42,9},'Types'},
        {cons,{42,17},{var,{42,18},'_'},{var,{42,20},'_'}}}],
      [],
      [{call,
        {47,5},
        {remote,{47,10},{atom,{47,5},lists},{atom,{47,11},join}},
        [{string,{47,16},"; "},
         {call,
          {47,22},
          {remote,{47,27},{atom,{47,22},lists},{atom,{47,28},map}},
          [{'fun',{47,32},{function,pp_type,1}},{var,{47,47},'Types'}]}]}]},
     {clause,
      {48,1},
      [{tuple,
        {48,9},
        [{atom,{48,10},type},
         {var,{48,16},'_'},
         {atom,{48,19},bounded_fun},
         {cons,
          {48,32},
          {var,{48,33},'FunType'},
          {cons,{48,42},{nil,{48,42}},{nil,{48,44}}}}]}],
      [],
      [{call,
        {51,5},
        {atom,{51,5},pp_type},
        [{call,
          {51,14},
          {atom,{51,14},':::'},
          [{var,{51,26},'FunType'},{string,{51,26},"function_type ( )"}]}]}]},
     {clause,
      {52,1},
      [{match,
        {52,9},
        {var,{52,9},'Type'},
        {tuple,
         {52,16},
         [{atom,{52,17},type},
          {var,{52,23},'_'},
          {atom,{52,26},bounded_fun},
          {var,{52,39},'_'}]}}],
      [],
      [{match,
        {55,5},
        {var,{55,5},'Form'},
        {tuple,
         {55,12},
         [{atom,{55,13},attribute},
          {call,
           {55,24},
           {remote,{55,32},{atom,{55,24},erl_anno},{atom,{55,33},new}},
           [{integer,{55,37},0}]},
          {atom,{55,41},spec},
          {tuple,
           {55,47},
           [{tuple,{55,48},[{atom,{55,49},foo},{integer,{55,54},0}]},
            {cons,{55,58},{var,{55,59},'Type'},{nil,{55,63}}}]}]}},
       {match,
        {56,5},
        {var,{56,5},'TypeDef'},
        {call,
         {56,15},
         {remote,{56,21},{atom,{56,15},erl_pp},{atom,{56,22},form}},
         [{var,{56,27},'Form'}]}},
       {match,
        {57,5},
        {tuple,
         {57,5},
         [{atom,{57,6},match},{cons,{57,13},{var,{57,14},'S'},{nil,{57,15}}}]},
        {call,
         {57,20},
         {remote,{57,22},{atom,{57,20},re},{atom,{57,23},run}},
         [{var,{57,27},'TypeDef'},
          {bin,
           {57,36},
           [{bin_element,
             {57,38},
             {string,{57,38},"-spec foo\\s*(.*)\\.\\n*$"},
             default,default}]},
          {cons,
           {58,27},
           {tuple,
            {58,28},
            [{atom,{58,29},capture},
             {atom,{58,38},all_but_first},
             {atom,{58,53},list}]},
           {cons,{58,60},{atom,{58,60},dotall},{nil,{58,66}}}}]}},
       {op,
        {59,12},
        '++',
        {string,{59,5},"fun("},
        {op,{59,17},'++',{var,{59,15},'S'},{string,{59,20},")"}}}]},
     {clause,
      {60,1},
      [{tuple,
        {60,9},
        [{atom,{60,10},var},{var,{60,15},'_'},{var,{60,18},'TyVar'}]}],
      [],
      [{'if',
        {62,5},
        [{clause,
          {63,9},
          [],
          [[{call,{63,9},{atom,{63,9},is_atom},[{var,{63,17},'TyVar'}]}]],
          [{call,
            {63,27},
            {atom,{63,27},atom_to_list},
            [{var,{63,40},'TyVar'}]}]},
         {clause,
          {64,9},
          [],
          [[{call,{64,9},{atom,{64,9},is_list},[{var,{64,17},'TyVar'}]}]],
          [{var,{64,27},'TyVar'}]}]}]},
     {clause,
      {66,1},
      [{var,{66,9},'Type'}],
      [],
      [{match,
        {69,5},
        {var,{69,5},'Form'},
        {tuple,
         {69,12},
         [{atom,{69,13},attribute},
          {call,
           {69,24},
           {remote,{69,32},{atom,{69,24},erl_anno},{atom,{69,33},new}},
           [{integer,{69,37},0}]},
          {atom,{69,41},type},
          {tuple,
           {69,47},
           [{atom,{69,48},t},{var,{69,51},'Type'},{nil,{69,57}}]}]}},
       {match,
        {70,5},
        {var,{70,5},'TypeDef'},
        {call,
         {70,15},
         {remote,{70,21},{atom,{70,15},erl_pp},{atom,{70,22},form}},
         [{var,{70,27},'Form'}]}},
       {match,
        {71,5},
        {tuple,
         {71,5},
         [{atom,{71,6},match},{cons,{71,13},{var,{71,14},'S'},{nil,{71,15}}}]},
        {call,
         {71,20},
         {remote,{71,22},{atom,{71,20},re},{atom,{71,23},run}},
         [{var,{71,27},'TypeDef'},
          {bin,
           {71,36},
           [{bin_element,
             {71,38},
             {string,{71,38},"::\\s*(.*)\\.\\n*"},
             default,default}]},
          {cons,
           {72,27},
           {tuple,
            {72,28},
            [{atom,{72,29},capture},
             {atom,{72,38},all_but_first},
             {atom,{72,53},list}]},
           {cons,{72,60},{atom,{72,60},dotall},{nil,{72,66}}}}]}},
       {'case',
        {73,5},
        {var,{73,10},'S'},
        [{clause,
          {73,15},
          [{op,{73,25},'++',{string,{73,15},"INVALID"},{var,{73,28},'_'}}],
          [],
          [{call,
            {73,33},
            {atom,{73,33},error},
            [{tuple,{73,39},[{atom,{73,40},badarg},{var,{73,48},'Type'}]}]}]},
         {clause,{74,15},[{var,{74,15},'_'}],[],[{atom,{74,20},ok}]}]},
       {var,{75,5},'S'}]}]}]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{extended_type()}",
                     "{[[extended_type()] |\n            {type,\n             erl_anno:anno(),\n             bounded_fun,\n             [function_type() | [constraint()]]} |\n            type(),\n            ...]}",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["extended_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_type_variable()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_atom()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{user_type,0,type,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type,\n           erl_anno:anno(),\n           bounded_fun,\n           [function_type() | [constraint()]]}",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["[extended_type()]",
                     "[[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           type(),\n           ...]",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["extended_type()",
                     "[extended_type()] |\n          {type,\n           erl_anno:anno(),\n           bounded_fun,\n           [function_type() | [constraint()]]} |\n          type()",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.92.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.92.0>,call,
       {typechecker,refine,["{extended_type()}","{none()}",seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,["extended_type()","none()",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.92.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{extended_type()}",
                     "{{type,\n            anno(),\n            bounded_fun,\n            [{type, anno(), 'fun', [any()]} |\n             {type, anno(), 'fun', [none()]} |\n             {type,\n              anno(),\n              'fun',\n              [any() |\n               {type,\n                anno(),\n                product,\n                [af_annotated_type() |\n                 af_atom() |\n                 af_bitstring_type() |\n                 af_constrained_function_type() |\n                 af_empty_list_type() |\n                 af_fun_type() |\n                 af_integer_range_type() |\n                 af_map_type() |\n                 af_predefined_type() |\n                 af_record_type() |\n                 af_remote_type() |\n                 af_singleton_integer_type() |\n                 af_tuple_type() |\n                 af_type_union() |\n                 af_type_variable() |\n                 af_user_defined_type()]} |\n               {type, anno(), product, [abstract_type()]}]} |\n             {type, anno(), 'fun', []}]}}",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["extended_type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,call,{typechecker,refine,["user_type","type",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_type_variable()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.92.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.92.0>,call,{typechecker,refine,["union","bounded_fun",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.92.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.92.0>,call,{typechecker,refine,["tuple","bounded_fun",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.92.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.92.0>,call,{typechecker,refine,["tuple","bounded_fun",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.92.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.92.0>,call,{typechecker,refine,["record","bounded_fun",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type,\n           anno(),\n           bounded_fun,\n           [{type, anno(), 'fun', [any()]} |\n            {type, anno(), 'fun', [none()]} |\n            {type,\n             anno(),\n             'fun',\n             [any() |\n              {type,\n               anno(),\n               product,\n               [af_annotated_type() |\n                af_atom() |\n                af_bitstring_type() |\n                af_constrained_function_type() |\n                af_empty_list_type() |\n                af_fun_type() |\n                af_integer_range_type() |\n                af_map_type() |\n                af_predefined_type() |\n                af_record_type() |\n                af_remote_type() |\n                af_singleton_integer_type() |\n                af_tuple_type() |\n                af_type_union() |\n                af_type_variable() |\n                af_user_defined_type()]} |\n              {type, anno(), product, [abstract_type()]}]} |\n            {type, anno(), 'fun', []}]}",
                     seen,env]}}
{trace,<0.92.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.92.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.92.0>,call,
       {typechecker,refine,["type_name()","bounded_fun",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.92.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.92.0>,call,
       {typechecker,refine,["atom() | [char()]","atom()",seen,env]}}
{trace,<0.92.0>,call,{typechecker,refine,["[char()]","atom()",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,{typechecker,refine,["atom()","atom()",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {type,0,list,[{type,0,char,[]}]}}
{trace,<0.92.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.92.0>,call,{typechecker,refine,["[char()]","[any()]",seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{extended_type()}","{{var, anno(), gr_type_var()}}",
                     seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["extended_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["type()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,call,{typechecker,refine,["integer","var",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_character()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.92.0>,call,{typechecker,refine,["char","var",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.92.0>,call,{typechecker,refine,["remote_type","var",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_atom()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,call,{typechecker,refine,["atom","var",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.92.0>,call,{typechecker,refine,["ann_type","var",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{type,\n           erl_anno:anno(),\n           bounded_fun,\n           [function_type() | [constraint()]]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["[extended_type()]","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.92.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.92.0>,return_from,
    {typechecker,refine,4},
    {type,0,union,
        [{type,0,list,[{user_type,0,extended_type,[]}]},
         {type,0,tuple,
             [{atom,0,type},
              {remote_type,0,[{atom,{34,34},erl_anno},{atom,{34,43},anno},[]]},
              {atom,0,bounded_fun},
              {type,0,list,
                  [{type,0,union,
                       [{user_type,0,function_type,[]},
                        {type,0,list,[{user_type,0,constraint,[]}]}]}]}]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_annotated_type,[]},
         {user_type,[{file,"gradualizer_type.erl"},{location,0}],af_atom,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_bitstring_type,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_constrained_function_type,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_empty_list_type,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_fun_type,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_integer_range_type,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_map_type,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_predefined_type,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_record_type,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_remote_type,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_singleton_integer_type,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_tuple_type,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_type_union,[]},
         {user_type,
             [{file,"gradualizer_type.erl"},{location,0}],
             af_user_defined_type,[]}]}}
{trace,<0.92.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.92.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{type,0,list,[{user_type,0,extended_type,[]}]},
              {type,0,tuple,
                  [{atom,0,type},
                   {remote_type,0,
                       [{atom,{34,34},erl_anno},{atom,{34,43},anno},[]]},
                   {atom,0,bounded_fun},
                   {type,0,list,
                       [{type,0,union,
                            [{user_type,0,function_type,[]},
                             {type,0,list,[{user_type,0,constraint,[]}]}]}]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_atom,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.92.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.92.0>,call,
       {typechecker,refine,
                    ["{[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_user_defined_type()}",
                     "{[extended_type()] |\n           {type,\n            erl_anno:anno(),\n            bounded_fun,\n            [function_type() | [constraint()]]} |\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_user_defined_type()}",
                     seen,env]}}
{trace,<0.92.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.92.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.92.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.93.0>,call,
 {typechecker,type_check_function,
  [{venv,#{}},
   {function,
    {82,1},
    debug_type,3,
    [{clause,
      {82,1},
      [{var,{82,12},'M'},{var,{82,15},'N'},{var,{82,18},'P'}],
      [],
      [{'case',
        {83,5},
        {call,
         {83,10},
         {remote,
          {83,24},
          {atom,{83,10},gradualizer_db},
          {atom,{83,25},get_type}},
         [{var,{83,34},'M'},{var,{83,37},'N'},{var,{83,40},'P'}]},
        [{clause,
          {84,9},
          [{tuple,{84,9},[{atom,{84,10},ok},{var,{84,14},'T'}]}],
          [],
          [{match,
            {85,13},
            {var,{85,13},'Params'},
            {call,
             {85,22},
             {remote,{85,27},{atom,{85,22},lists},{atom,{85,28},join}},
             [{char,{85,33},44},
              {call,
               {85,37},
               {remote,{85,42},{atom,{85,37},lists},{atom,{85,43},map}},
               [{'fun',{85,47},{function,pp_type,1}},{var,{85,62},'P'}]}]}},
           {call,
            {86,13},
            {remote,{86,15},{atom,{86,13},io},{atom,{86,16},format}},
            [{string,{86,23},"~w:~w(~s) :: ~s.~n"},
             {cons,
              {87,23},
              {var,{87,24},'M'},
              {cons,
               {87,27},
               {var,{87,27},'N'},
               {cons,
                {87,30},
                {var,{87,30},'Params'},
                {cons,
                 {87,38},
                 {call,{87,38},{atom,{87,38},pp_type},[{var,{87,46},'T'}]},
                 {nil,{87,48}}}}}}]}]},
         {clause,
          {88,9},
          [{atom,{88,9},not_found}],
          [],
          [{atom,{89,13},not_found}]}]}]}]}]}}
{trace,<0.93.0>,call,
       {typechecker,refine,
                    ["{any(), any(), any()}","{any(), any(), any()}",seen,
                     env]}}
{trace,<0.93.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.93.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.93.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.94.0>,call,
    {typechecker,type_check_function,
        [{venv,#{}},
         {function,
             {93,1},
             parse_type,1,
             [{clause,
                  {93,1},
                  [{var,{93,12},'Src'}],
                  [],
                  [{match,
                       {94,5},
                       {var,{94,5},'AttrSrc'},
                       {op,{94,31},
                           '++',
                           {string,{94,15},"-type t() :: "},
                           {op,{94,38},
                               '++',
                               {var,{94,34},'Src'},
                               {string,{94,41},"."}}}},
                   {match,
                       {95,5},
                       {tuple,
                           {95,5},
                           [{atom,{95,6},ok},
                            {var,{95,10},'Tokens'},
                            {var,{95,18},'_EndLocation'}]},
                       {call,
                           {95,34},
                           {remote,
                               {95,42},
                               {atom,{95,34},erl_scan},
                               {atom,{95,43},string}},
                           [{var,{95,50},'AttrSrc'}]}},
                   {match,
                       {96,5},
                       {tuple,
                           {96,5},
                           [{atom,{96,6},ok},
                            {tuple,
                                {96,10},
                                [{atom,{96,11},attribute},
                                 {var,{96,22},'_'},
                                 {atom,{96,25},type},
                                 {tuple,
                                     {96,31},
                                     [{atom,{96,32},t},
                                      {var,{96,35},'Type'},
                                      {nil,{96,41}}]}]}]},
                       {call,
                           {96,49},
                           {remote,
                               {96,58},
                               {atom,{96,49},erl_parse},
                               {atom,{96,59},parse_form}},
                           [{var,{96,70},'Tokens'}]}},
                   {var,{97,5},'Type'}]}]}]}}
{trace,<0.94.0>,call,
       {typechecker,refine,["{string()}","{string()}",seen,env]}}
{trace,<0.94.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.94.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.94.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.95.0>,call,
 {typechecker,type_check_function,
  [{venv,#{}},
   {function,
    {114,1},
    remove_pos,1,
    [{clause,
      {114,1},
      [{match,
        {114,12},
        {tuple,
         {114,12},
         [{atom,{114,13},type},
          {var,{114,19},'_'},
          {atom,{114,22},constraint},
          {var,{114,34},'_'}]},
        {var,{114,39},'Constraint'}}],
      [],
      [{call,
        {115,5},
        {atom,{115,5},remove_pos_constraint},
        [{var,{115,27},'Constraint'}]}]},
     {clause,
      {117,1},
      [{tuple,
        {117,12},
        [{match,{117,13},{atom,{117,13},atom},{var,{117,20},'Type'}},
         {var,{117,26},'_'},
         {var,{117,29},'Value'}]}],
      [],
      [{tuple,
        {118,5},
        [{var,{118,6},'Type'},
         {call,
          {118,12},
          {remote,{118,20},{atom,{118,12},erl_anno},{atom,{118,21},new}},
          [{integer,{118,25},0}]},
         {var,{118,29},'Value'}]}]},
     {clause,
      {119,1},
      [{tuple,
        {119,12},
        [{match,{119,13},{atom,{119,13},integer},{var,{119,23},'Type'}},
         {var,{119,29},'_'},
         {var,{119,32},'Value'}]}],
      [],
      [{tuple,
        {120,5},
        [{var,{120,6},'Type'},
         {call,
          {120,12},
          {remote,{120,20},{atom,{120,12},erl_anno},{atom,{120,21},new}},
          [{integer,{120,25},0}]},
         {var,{120,29},'Value'}]}]},
     {clause,
      {121,1},
      [{tuple,
        {121,12},
        [{match,{121,13},{atom,{121,13},char},{var,{121,20},'Type'}},
         {var,{121,26},'_'},
         {var,{121,29},'Value'}]}],
      [],
      [{tuple,
        {122,5},
        [{var,{122,6},'Type'},
         {call,
          {122,12},
          {remote,{122,20},{atom,{122,12},erl_anno},{atom,{122,21},new}},
          [{integer,{122,25},0}]},
         {var,{122,29},'Value'}]}]},
     {clause,
      {123,1},
      [{tuple,
        {123,12},
        [{match,{123,13},{atom,{123,13},var},{var,{123,19},'Type'}},
         {var,{123,25},'_'},
         {var,{123,28},'Value'}]}],
      [],
      [{tuple,
        {124,5},
        [{var,{124,6},'Type'},
         {call,
          {124,12},
          {remote,{124,20},{atom,{124,12},erl_anno},{atom,{124,21},new}},
          [{integer,{124,25},0}]},
         {var,{124,29},'Value'}]}]},
     {clause,
      {126,1},
      [{tuple,
        {126,12},
        [{atom,{126,13},user_type},
         {var,{126,24},'Anno'},
         {var,{126,30},'Name'},
         {var,{126,36},'Params'}]}],
      [],
      [{tuple,
        {127,5},
        [{atom,{127,6},user_type},
         {call,
          {127,17},
          {atom,{127,17},anno_keep_only_filename},
          [{var,{127,41},'Anno'}]},
         {var,{127,48},'Name'},
         {call,
          {128,6},
          {remote,{128,11},{atom,{128,6},lists},{atom,{128,12},map}},
          [{'fun',{128,16},{function,remove_pos,1}},
           {var,{128,34},'Params'}]}]}]},
     {clause,
      {129,1},
      [{tuple,
        {129,12},
        [{atom,{129,13},type},
         {var,{129,19},'Anno'},
         {atom,{129,25},record},
         {cons,{129,33},{var,{129,34},'Name'},{var,{129,41},'TypedFields'}}]}],
      [],
      [{tuple,
        {130,5},
        [{atom,{130,6},type},
         {call,
          {130,12},
          {atom,{130,12},anno_keep_only_filename},
          [{var,{130,36},'Anno'}]},
         {atom,{130,43},record},
         {cons,
          {131,6},
          {call,{131,7},{atom,{131,7},remove_pos},[{var,{131,18},'Name'}]},
          {call,
           {131,26},
           {remote,{131,31},{atom,{131,26},lists},{atom,{131,32},map}},
           [{'fun',{131,36},{function,remove_pos,1}},
            {var,{131,54},'TypedFields'}]}}]}]},
     {clause,
      {132,1},
      [{tuple,
        {132,12},
        [{atom,{132,13},type},
         {var,{132,19},'_'},
         {atom,{132,22},field_type},
         {cons,
          {132,34},
          {var,{132,35},'FName'},
          {cons,{132,42},{var,{132,42},'FTy'},{nil,{132,45}}}}]}],
      [],
      [{tuple,
        {133,5},
        [{atom,{133,6},type},
         {call,
          {133,12},
          {remote,{133,20},{atom,{133,12},erl_anno},{atom,{133,21},new}},
          [{integer,{133,25},0}]},
         {atom,{133,29},field_type},
         {cons,
          {133,41},
          {call,{133,42},{atom,{133,42},remove_pos},[{var,{133,53},'FName'}]},
          {cons,
           {133,61},
           {call,{133,61},{atom,{133,61},remove_pos},[{var,{133,72},'FTy'}]},
           {nil,{133,76}}}}]}]},
     {clause,
      {135,1},
      [{tuple,
        {135,12},
        [{atom,{135,13},type},
         {var,{135,19},'_'},
         {match,{135,22},{atom,{135,22},tuple},{var,{135,30},'Type'}},
         {atom,{135,36},any}]}],
      [],
      [{tuple,
        {136,5},
        [{atom,{136,6},type},
         {call,
          {136,12},
          {remote,{136,20},{atom,{136,12},erl_anno},{atom,{136,21},new}},
          [{integer,{136,25},0}]},
         {var,{136,29},'Type'},
         {atom,{136,35},any}]}]},
     {clause,
      {137,1},
      [{tuple,
        {137,12},
        [{atom,{137,13},type},
         {var,{137,19},'_'},
         {match,{137,22},{atom,{137,22},map},{var,{137,28},'Type'}},
         {atom,{137,34},any}]}],
      [],
      [{tuple,
        {138,5},
        [{atom,{138,6},type},
         {call,
          {138,12},
          {remote,{138,20},{atom,{138,12},erl_anno},{atom,{138,21},new}},
          [{integer,{138,25},0}]},
         {var,{138,29},'Type'},
         {atom,{138,35},any}]}]},
     {clause,
      {140,1},
      [{tuple,
        {140,12},
        [{atom,{140,13},type},
         {var,{140,19},'_'},
         {var,{140,22},'Type'},
         {var,{140,28},'Params'}]}],
      [],
      [{tuple,
        {141,5},
        [{atom,{141,6},type},
         {call,
          {141,12},
          {remote,{141,20},{atom,{141,12},erl_anno},{atom,{141,21},new}},
          [{integer,{141,25},0}]},
         {var,{141,29},'Type'},
         {call,
          {141,35},
          {remote,{141,40},{atom,{141,35},lists},{atom,{141,41},map}},
          [{'fun',
            {141,45},
            {clauses,
             [{clause,
               {142,49},
               [{tuple,
                 {142,50},
                 [{atom,{142,51},type},
                  {var,{142,57},'_'},
                  {atom,{142,60},any}]}],
               [],
               [{tuple,
                 {143,53},
                 [{atom,{143,54},type},
                  {call,
                   {143,60},
                   {remote,
                    {143,68},
                    {atom,{143,60},erl_anno},
                    {atom,{143,69},new}},
                   [{integer,{143,73},0}]},
                  {atom,{143,77},any}]}]},
              {clause,
               {144,49},
               [{var,{144,50},'P'}],
               [[{call,
                  {144,58},
                  {atom,{144,58},is_list},
                  [{var,{144,66},'P'}]}]],
               [{call,
                 {145,53},
                 {atom,{145,53},remove_pos_all},
                 [{var,{145,68},'P'}]}]},
              {clause,
               {146,49},
               [{var,{146,50},'P'}],
               [],
               [{call,
                 {147,53},
                 {atom,{147,53},remove_pos},
                 [{var,{147,64},'P'}]}]}]}},
           {var,{148,50},'Params'}]}]}]},
     {clause,
      {150,1},
      [{tuple,
        {150,12},
        [{atom,{150,13},type},
         {var,{150,19},'_'},
         {match,
          {150,22},
          {atom,{150,22},map_field_exact},
          {var,{150,40},'Assoc'}},
         {var,{150,47},'Tys'}]}],
      [],
      [{tuple,
        {151,5},
        [{atom,{151,6},type},
         {call,
          {151,12},
          {remote,{151,20},{atom,{151,12},erl_anno},{atom,{151,21},new}},
          [{integer,{151,25},0}]},
         {var,{151,29},'Assoc'},
         {call,
          {151,36},
          {remote,{151,41},{atom,{151,36},lists},{atom,{151,42},map}},
          [{'fun',{151,46},{function,remove_pos,1}},{var,{151,64},'Tys'}]}]}]},
     {clause,
      {152,1},
      [{tuple,
        {152,12},
        [{atom,{152,13},type},
         {var,{152,19},'_'},
         {match,
          {152,22},
          {atom,{152,22},map_field_assoc},
          {var,{152,40},'Assoc'}},
         {var,{152,47},'Tys'}]}],
      [],
      [{tuple,
        {153,5},
        [{atom,{153,6},type},
         {call,
          {153,12},
          {remote,{153,20},{atom,{153,12},erl_anno},{atom,{153,21},new}},
          [{integer,{153,25},0}]},
         {var,{153,29},'Assoc'},
         {call,
          {153,36},
          {remote,{153,41},{atom,{153,36},lists},{atom,{153,42},map}},
          [{'fun',{153,46},{function,remove_pos,1}},{var,{153,64},'Tys'}]}]}]},
     {clause,
      {155,1},
      [{match,
        {155,12},
        {tuple,
         {155,12},
         [{atom,{155,13},remote_type},{var,{155,26},'_'},{var,{155,29},'_'}]},
        {var,{155,34},'RemoteType'}}],
      [],
      [{call,
        {156,5},
        {atom,{156,5},remove_pos_remote_type},
        [{var,{156,28},'RemoteType'}]}]},
     {clause,
      {157,1},
      [{match,
        {157,12},
        {tuple,
         {157,12},
         [{atom,{157,13},ann_type},{var,{157,23},'_'},{var,{157,26},'_'}]},
        {var,{157,31},'AnnType'}}],
      [],
      [{call,
        {158,5},
        {atom,{158,5},remove_pos_ann_type},
        [{var,{158,25},'AnnType'}]}]},
     {clause,
      {159,1},
      [{tuple,
        {159,12},
        [{atom,{159,13},op},
         {var,{159,17},'_'},
         {var,{159,20},'Op'},
         {var,{159,24},'Type'}]}],
      [],
      [{tuple,
        {160,5},
        [{atom,{160,6},op},
         {call,
          {160,10},
          {remote,{160,18},{atom,{160,10},erl_anno},{atom,{160,19},new}},
          [{integer,{160,23},0}]},
         {var,{160,27},'Op'},
         {call,
          {160,31},
          {atom,{160,31},remove_pos},
          [{var,{160,42},'Type'}]}]}]},
     {clause,
      {161,1},
      [{match,
        {161,12},
        {tuple,
         {161,12},
         [{atom,{161,13},op},
          {var,{161,17},'_'},
          {var,{161,20},'_Op'},
          {var,{161,25},'_Type1'},
          {var,{161,33},'_Type2'}]},
        {var,{161,43},'BinOp'}}],
      [],
      [{call,
        {162,5},
        {atom,{162,5},remove_pos_binary_op},
        [{var,{162,26},'BinOp'}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [{[{user_type,0,af_constraint,[]}],
                      {user_type,0,af_constraint,[]}},
                     "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] =>
                           [{user_type,0,af_constraint,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_constraint()}","{af_constraint()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
                     "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type()}",
                     "{{type, anno(), constraint, [abstract_type()]}}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["type()","{type, anno(), constraint, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["user_type","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), constraint, [abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","constraint",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,check_clauses_intersection,
                    [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
                     "fun({atom = Type, _, Value}) ->\n       ok\nend",
                     #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
                       [{user_type,0,type,[]}] => [{user_type,0,type,[]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,["{type()}","{{atom, anno(), atom()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["integer","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["char","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{atom, anno(), atom()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,["af_atom()","{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{atom, anno(), atom()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","atom",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_singleton_integer_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_variable,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({integer = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_user_defined_type()}",
                     "{{integer, anno(), integer()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_user_defined_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["char","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{integer, anno(), integer()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{integer, anno(), integer()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{integer, anno(), integer()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","integer",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_character,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_variable,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({char = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_character() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{char, anno(), char()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_character() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["var","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{char, anno(), char()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{char, anno(), char()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_character()","{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{char, anno(), char()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{char, anno(), char()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","char",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_variable,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({var = Type, _, Value}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{var, anno(), gr_type_var()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["remote_type","var",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","var",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({user_type, Anno, Name, Params}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type()) |\n           af_user_defined_type()}",
                     "{{user_type, anno(), type_name(), [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type()) |\n          af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, Anno, record, [Name | TypedFields]}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type,\n            anno(),\n            record,\n            [{atom, anno(), atom()} |\n             {type,\n              anno(),\n              field_type,\n              [{atom, anno(), atom()} |\n               af_annotated_type() |\n               af_atom() |\n               af_bitstring_type() |\n               af_constrained_function_type() |\n               af_empty_list_type() |\n               af_fun_type() |\n               af_integer_range_type() |\n               af_map_type() |\n               af_predefined_type() |\n               af_record_type() |\n               af_remote_type() |\n               af_singleton_integer_type() |\n               af_tuple_type() |\n               af_type_union() |\n               af_type_variable() |\n               af_user_defined_type()]},\n             ...]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type,\n           anno(),\n           record,\n           [{atom, anno(), atom()} |\n            {type,\n             anno(),\n             field_type,\n             [{atom, anno(), atom()} |\n              af_annotated_type() |\n              af_atom() |\n              af_bitstring_type() |\n              af_constrained_function_type() |\n              af_empty_list_type() |\n              af_fun_type() |\n              af_integer_range_type() |\n              af_map_type() |\n              af_predefined_type() |\n              af_record_type() |\n              af_remote_type() |\n              af_singleton_integer_type() |\n              af_tuple_type() |\n              af_type_union() |\n              af_type_variable() |\n              af_user_defined_type()]},\n            ...]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","record",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["[af_atom() | af_record_field_type()]",
                     "[{atom, anno(), atom()} |\n           {type,\n            anno(),\n            field_type,\n            [{atom, anno(), atom()} |\n             af_annotated_type() |\n             af_atom() |\n             af_bitstring_type() |\n             af_constrained_function_type() |\n             af_empty_list_type() |\n             af_fun_type() |\n             af_integer_range_type() |\n             af_map_type() |\n             af_predefined_type() |\n             af_record_type() |\n             af_remote_type() |\n             af_singleton_integer_type() |\n             af_tuple_type() |\n             af_type_union() |\n             af_type_variable() |\n             af_user_defined_type()]},\n           ...]",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_atom() | af_record_field_type()",
                     "{atom, anno(), atom()} |\n          {type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_field_type()",
                     "{atom, anno(), atom()} |\n          {type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), field_type, [af_atom() | abstract_type()]}",
                     "{atom, anno(), atom()}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-7-',4}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), field_type, [af_atom() | abstract_type()]}",
                     "{type,\n           anno(),\n           field_type,\n           [{atom, anno(), atom()} |\n            af_annotated_type() |\n            af_atom() |\n            af_bitstring_type() |\n            af_constrained_function_type() |\n            af_empty_list_type() |\n            af_fun_type() |\n            af_integer_range_type() |\n            af_map_type() |\n            af_predefined_type() |\n            af_record_type() |\n            af_remote_type() |\n            af_singleton_integer_type() |\n            af_tuple_type() |\n            af_type_union() |\n            af_type_variable() |\n            af_user_defined_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["field_type","field_type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["[af_atom() | abstract_type()]",
                     "[{atom, anno(), atom()} |\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable() |\n           af_user_defined_type()]",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-7-',4}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, field_type, [FName, FTy]}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), field_type, none()}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), field_type, none()}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), field_type, none()}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","field_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, tuple = Type, any}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), tuple, any}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","tuple",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["[abstract_type()]","any",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), tuple, any}",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{atom,0,type},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],anno,[]},
              {atom,0,tuple},
              {type,0,list,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                abstract_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), tuple, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","tuple",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map = Type, any}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map, any}}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["union","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}","{type, anno(), map, any}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["tuple","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), map, any}",seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["record","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), map, any}",seen,
                     env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["type_name()","map",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, Type, Params}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{A_typechecker_3529_22}",
                     "{{type, A_typechecker_3529_22_typechecker_1257_27, any}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["A_typechecker_3529_22",
                     "{type, A_typechecker_3529_22_typechecker_1257_27, any}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["A_typechecker_3529_22","[any()]",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{A_typechecker_3529_22}","{A_typechecker_3529_22}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{none()}",seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "none()",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map_field_exact = Assoc, Tys}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map_field_exact, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), map_field_exact, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","map_field_exact",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, map_field_assoc = Assoc, Tys}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{type, anno(), map_field_assoc, [abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["union","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["tuple","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["record","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{type, anno(), map_field_assoc, [abstract_type()]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,call,
       {typechecker,refine,["type_name()","map_field_assoc",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({remote_type, _, _} = RemoteType) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{remote_type,\n            anno(),\n            [af_atom() | af_atom() | [abstract_type()]]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{remote_type,\n           anno(),\n           [af_atom() | af_atom() | [abstract_type()]]}",
                     seen,env]}}
{trace,<0.95.0>,call,{typechecker,refine,["ann_type","remote_type",seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({ann_type, _, _} = AnnType) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{ann_type, anno(), [af_anno() | abstract_type()]}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{ann_type, anno(), [af_anno() | abstract_type()]}",seen,
                     env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({op, _, Op, Type}) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({op, _, _Op, _Type1, _Type2} = BinOp) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_unary_op(af_singleton_integer_type())}",
                     "{{op,\n            anno(),\n            binary_op(),\n            af_singleton_integer_type(),\n            af_singleton_integer_type()}}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_unary_op(af_singleton_integer_type())",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.95.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.95.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.95.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_unary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "no_clause",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,call,
    {typechecker,check_clauses_intersection,
        [{[{user_type,0,type,[]}],{user_type,0,type,[]}},
         "fun({type, _, constraint, _} = Constraint) ->\n       ok\nend",
         #{[{user_type,0,af_constraint,[]}] => [{type,0,none,[]}],
           [{user_type,0,type,[]}] =>
               [{type,0,union,
                    [{user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
                     {user_type,
                         [{file,"gradualizer_type.erl"},{location,0}],
                         af_unary_op,
                         [{user_type,
                              [{file,"gradualizer_type.erl"},{location,0}],
                              af_singleton_integer_type,[]}]}]}]}]}}
{trace,<0.95.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.96.0>,call,
    {typechecker,type_check_function,
        [{venv,#{}},
         {function,
             {164,1},
             remove_pos_binary_op,1,
             [{clause,
                  {164,1},
                  [{tuple,
                       {164,22},
                       [{atom,{164,23},op},
                        {var,{164,27},'_'},
                        {var,{164,30},'Op'},
                        {var,{164,34},'Type1'},
                        {var,{164,41},'Type2'}]}],
                  [],
                  [{match,
                       {165,5},
                       {var,{165,5},'Type1'},
                       {call,
                           {165,14},
                           {atom,{165,14},':::'},
                           [{var,{165,26},'Type1'},
                            {string,{165,26},"type ( )"}]}},
                   {match,
                       {166,5},
                       {var,{166,5},'Type2'},
                       {call,
                           {166,14},
                           {atom,{166,14},':::'},
                           [{var,{166,26},'Type2'},
                            {string,{166,26},"type ( )"}]}},
                   {tuple,
                       {167,5},
                       [{atom,{167,6},op},
                        {call,
                            {167,10},
                            {remote,
                                {167,18},
                                {atom,{167,10},erl_anno},
                                {atom,{167,19},new}},
                            [{integer,{167,23},0}]},
                        {var,{167,27},'Op'},
                        {call,
                            {167,31},
                            {atom,{167,31},remove_pos},
                            [{var,{167,42},'Type1'}]},
                        {call,
                            {167,50},
                            {atom,{167,50},remove_pos},
                            [{var,{167,61},'Type2'}]}]}]}]}]}}
{trace,<0.96.0>,call,{typechecker,refine,["{any()}","{none()}",seen,env]}}
{trace,<0.96.0>,call,{typechecker,refine,["any()","none()",seen,env]}}
{trace,<0.96.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.96.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.96.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.96.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.97.0>,call,
 {typechecker,type_check_function,
  [{venv,#{}},
   {function,
    {169,1},
    remove_pos_constraint,1,
    [{clause,
      {169,1},
      [{tuple,
        {169,23},
        [{atom,{169,24},type},
         {var,{169,30},'_'},
         {atom,{169,33},constraint},
         {cons,
          {169,45},
          {tuple,
           {169,46},
           [{atom,{169,47},atom},
            {var,{169,53},'_'},
            {atom,{169,56},is_subtype}]},
          {cons,{169,69},{var,{169,69},'Args'},{nil,{169,73}}}}]}],
      [],
      [{match,
        {170,5},
        {var,{170,5},'L'},
        {call,
         {170,9},
         {remote,{170,17},{atom,{170,9},erl_anno},{atom,{170,18},new}},
         [{integer,{170,22},0}]}},
       {tuple,
        {171,5},
        [{atom,{171,6},type},
         {var,{171,12},'L'},
         {atom,{171,15},constraint},
         {cons,
          {171,27},
          {tuple,
           {171,28},
           [{atom,{171,29},atom},
            {var,{171,35},'L'},
            {atom,{171,38},is_subtype}]},
          {cons,
           {171,51},
           {call,
            {171,51},
            {remote,{171,56},{atom,{171,51},lists},{atom,{171,57},map}},
            [{'fun',{171,61},{function,remove_pos,1}},{var,{171,79},'Args'}]},
           {nil,{171,84}}}}]}]}]}]}}
{trace,<0.97.0>,call,{typechecker,refine,["{any()}","{none()}",seen,env]}}
{trace,<0.97.0>,call,{typechecker,refine,["any()","none()",seen,env]}}
{trace,<0.97.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.97.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.97.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.97.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.98.0>,call,
    {typechecker,type_check_function,
        [{venv,#{}},
         {function,
             {174,1},
             remove_pos_all,1,
             [{clause,{174,1},[{nil,{174,16}}],[],[{nil,{175,5}}]},
              {clause,
                  {176,1},
                  [{match,
                       {176,16},
                       {cons,{176,16},{var,{176,17},'_'},{var,{176,19},'_'}},
                       {var,{176,24},'L'}}],
                  [],
                  [{call,
                       {177,5},
                       {remote,
                           {177,10},
                           {atom,{177,5},lists},
                           {atom,{177,11},map}},
                       [{'fun',{177,15},{function,remove_pos,1}},
                        {var,{177,33},'L'}]}]}]}]}}
{trace,<0.98.0>,call,{typechecker,refine,["{list()}","{[]}",seen,env]}}
{trace,<0.98.0>,call,{typechecker,refine,["list()","[]",seen,env]}}
{trace,<0.98.0>,return_from,
       {typechecker,refine,4},
       {type,0,nonempty_list,[{type,0,any,[]}]}}
{trace,<0.98.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.98.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,[{type,0,nonempty_list,[{type,0,any,[]}]}]}}
{trace,<0.98.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.98.0>,call,
       {typechecker,refine,["{[any(), ...]}","{[any(), ...]}",seen,env]}}
{trace,<0.98.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.98.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.98.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.99.0>,call,
    {typechecker,type_check_function,
        [{venv,#{}},
         {function,
             {179,1},
             remove_pos_remote_type,1,
             [{clause,
                  {179,1},
                  [{tuple,
                       {179,24},
                       [{atom,{179,25},remote_type},
                        {var,{179,38},'_'},
                        {cons,
                            {179,41},
                            {var,{179,42},'Mod'},
                            {cons,
                                {179,47},
                                {var,{179,47},'Name'},
                                {cons,
                                    {179,53},
                                    {var,{179,53},'Params'},
                                    {nil,{179,59}}}}}]}],
                  [],
                  [{match,
                       {180,5},
                       {var,{180,5},'Params1'},
                       {call,
                           {180,15},
                           {remote,
                               {180,20},
                               {atom,{180,15},lists},
                               {atom,{180,21},map}},
                           [{'fun',{180,25},{function,remove_pos,1}},
                            {var,{180,43},'Params'}]}},
                   {tuple,
                       {181,5},
                       [{atom,{181,6},remote_type},
                        {call,
                            {181,19},
                            {remote,
                                {181,27},
                                {atom,{181,19},erl_anno},
                                {atom,{181,28},new}},
                            [{integer,{181,32},0}]},
                        {cons,
                            {181,36},
                            {var,{181,37},'Mod'},
                            {cons,
                                {181,42},
                                {var,{181,42},'Name'},
                                {cons,
                                    {181,48},
                                    {var,{181,48},'Params1'},
                                    {nil,{181,55}}}}}]}]}]}]}}
{trace,<0.99.0>,call,{typechecker,refine,["{any()}","{none()}",seen,env]}}
{trace,<0.99.0>,call,{typechecker,refine,["any()","none()",seen,env]}}
{trace,<0.99.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.99.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.99.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.99.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.100.0>,call,
    {typechecker,type_check_function,
        [{venv,#{}},
         {function,
             {183,1},
             remove_pos_ann_type,1,
             [{clause,
                  {183,1},
                  [{tuple,
                       {183,21},
                       [{atom,{183,22},ann_type},
                        {var,{183,32},'_'},
                        {cons,
                            {183,35},
                            {var,{183,36},'_Var'},
                            {cons,
                                {183,42},
                                {var,{183,42},'Type'},
                                {nil,{183,46}}}}]}],
                  [],
                  [{call,
                       {185,5},
                       {atom,{185,5},remove_pos},
                       [{call,
                            {185,17},
                            {atom,{185,17},':::'},
                            [{var,{185,29},'Type'},
                             {string,{185,29},"type ( )"}]}]}]}]}]}}
{trace,<0.100.0>,call,{typechecker,refine,["{any()}","{none()}",seen,env]}}
{trace,<0.100.0>,call,{typechecker,refine,["any()","none()",seen,env]}}
{trace,<0.100.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.100.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.100.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.100.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.101.0>,call,
    {typechecker,type_check_function,
        [{venv,#{}},
         {function,
             {189,1},
             anno_keep_only_filename,1,
             [{clause,
                  {189,1},
                  [{var,{189,25},'Anno'}],
                  [],
                  [{match,
                       {190,5},
                       {var,{190,5},'NewAnno'},
                       {call,
                           {190,15},
                           {remote,
                               {190,23},
                               {atom,{190,15},erl_anno},
                               {atom,{190,24},new}},
                           [{integer,{190,28},0}]}},
                   {'case',
                       {191,5},
                       {call,
                           {191,10},
                           {remote,
                               {191,18},
                               {atom,{191,10},erl_anno},
                               {atom,{191,19},file}},
                           [{var,{191,24},'Anno'}]},
                       [{clause,
                            {192,9},
                            [{atom,{192,9},undefined}],
                            [],
                            [{var,{192,22},'NewAnno'}]},
                        {clause,
                            {193,9},
                            [{var,{193,9},'Filename'}],
                            [],
                            [{call,
                                 {193,22},
                                 {remote,
                                     {193,30},
                                     {atom,{193,22},erl_anno},
                                     {atom,{193,31},set_file}},
                                 [{var,{193,40},'Filename'},
                                  {var,{193,50},'NewAnno'}]}]}]}]}]}]}}
{trace,<0.101.0>,call,
       {typechecker,refine,
                    ["{filename() | undefined}","{undefined}",seen,env]}}
{trace,<0.101.0>,call,
       {typechecker,refine,["filename() | undefined","undefined",seen,env]}}
{trace,<0.101.0>,call,
       {typechecker,refine,["filename()","undefined",seen,env]}}
{trace,<0.101.0>,call,{typechecker,refine,["[char()]","undefined",seen,env]}}
{trace,<0.101.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.101.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.101.0>,call,{typechecker,refine,["<<_:_*8>>","undefined",seen,env]}}
{trace,<0.101.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.101.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.101.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"erl_anno.erl"},{location,0}],filename,[]}}
{trace,<0.101.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.101.0>,call,{typechecker,refine,["undefined","undefined",seen,env]}}
{trace,<0.101.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.101.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.101.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"erl_anno.erl"},{location,0}],filename,[]}}
{trace,<0.101.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.101.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{user_type,[{file,"erl_anno.erl"},{location,0}],filename,[]}]}}
{trace,<0.101.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.101.0>,call,
       {typechecker,refine,["{filename()}","{filename()}",seen,env]}}
{trace,<0.101.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.101.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.101.0>,call,
       {typechecker,refine,
                    ["{erl_anno:anno()}","{erl_anno:anno()}",seen,env]}}
{trace,<0.101.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.101.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.101.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.102.0>,call,
    {typechecker,type_check_function,
        [{venv,#{}},
         {function,
             {198,1},
             annotate_user_type,2,
             [{clause,
                  {198,1},
                  [{var,{198,20},'ModOrFile'},{var,{198,31},'Type'}],
                  [],
                  [{match,
                       {199,5},
                       {var,{199,5},'Filename'},
                       {call,
                           {199,16},
                           {atom,{199,16},ensure_filename},
                           [{var,{199,32},'ModOrFile'}]}},
                   {call,
                       {200,5},
                       {atom,{200,5},annotate_user_type_},
                       [{var,{200,25},'Filename'},
                        {var,{200,35},'Type'}]}]}]}]}}
{trace,<0.102.0>,call,
       {typechecker,refine,
                    ["{module() | file:filename(), type()}",
                     "{module() | file:filename(), type()}",seen,env]}}
{trace,<0.102.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.102.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.102.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.103.0>,call,
 {typechecker,type_check_function,
  [{venv,#{}},
   {function,
    {203,1},
    ensure_filename,1,
    [{clause,
      {203,1},
      [{var,{203,17},'ModOrFile'}],
      [],
      [{'case',
        {204,5},
        {var,{204,10},'ModOrFile'},
        [{clause,
          {205,9},
          [{var,{205,9},'Module'}],
          [[{call,
             {205,21},
             {atom,{205,21},is_atom},
             [{var,{205,29},'ModOrFile'}]}]],
          [{op,
            {206,56},
            '++',
            {call,
             {206,13},
             {atom,{206,13},atom_to_list},
             [{call,
               {206,27},
               {atom,{206,27},':::'},
               [{var,{206,39},'Module'},{string,{206,39},"atom ( )"}]}]},
            {string,{206,59},".erl"}}]},
         {clause,
          {207,9},
          [{var,{207,9},'_'}],
          [],
          [{var,{207,14},'ModOrFile'}]}]}]}]}]}}
{trace,<0.103.0>,call,
       {typechecker,refine,["atom() | [char()]","atom()",seen,env]}}
{trace,<0.103.0>,call,{typechecker,refine,["[char()]","atom()",seen,env]}}
{trace,<0.103.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,call,{typechecker,refine,["atom()","atom()",seen,env]}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.103.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.103.0>,return_from,
       {typechecker,refine,4},
       {type,0,list,[{type,0,char,[]}]}}
{trace,<0.103.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["{atom() | [char()]}","{atom() | [char()]}",seen,env]}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.103.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.103.0>,call,
       {typechecker,refine,
                    ["{module() | file:filename()}",
                     "{module() | file:filename()}",seen,env]}}
{trace,<0.103.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.103.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.103.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.104.0>,call,
 {typechecker,type_check_function,
  [{venv,#{}},
   {function,
    {214,1},
    annotate_user_types,2,
    [{clause,
      {214,1},
      [{var,{214,21},'ModOrFile'},{var,{214,32},'TypeOrTypes'}],
      [],
      [{'case',
        {215,5},
        {var,{215,10},'TypeOrTypes'},
        [{clause,
          {216,9},
          [{var,{216,9},'Types'}],
          [[{call,{216,20},{atom,{216,20},is_list},[{var,{216,28},'Types'}]}]],
          [{lc,
            {217,13},
            {call,
             {217,15},
             {atom,{217,15},annotate_user_type},
             [{var,{217,34},'ModOrFile'},{var,{217,45},'Type'}]},
            [{generate,
              {217,59},
              {var,{217,54},'Type'},
              {call,
               {217,63},
               {atom,{217,63},':::'},
               [{var,{217,75},'Types'},{string,{217,75},"[ type ( ) ]"}]}}]}]},
         {clause,
          {218,9},
          [{var,{218,9},'Type'}],
          [],
          [{call,
            {219,13},
            {atom,{219,13},annotate_user_type},
            [{var,{219,32},'ModOrFile'},
             {call,
              {219,44},
              {atom,{219,44},':::'},
              [{var,{219,56},'Type'},
               {string,{219,56},"type ( )"}]}]}]}]}]}]}]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["[type()] | type()","[any()]",seen,env]}}
{trace,<0.104.0>,call,{typechecker,refine,["type()","[any()]",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_user_defined_type()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_type_variable()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_type_union()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_tuple_type()","[any()]",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}","[any()]",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["{type, anno(), tuple, any}","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()","[any()]",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["gr_integer()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())","[any()]",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_character()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())","[any()]",
                     seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_remote_type()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_record_type()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_predefined_type()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_map_type()","[any()]",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}","[any()]",seen,
                     env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["{type, anno(), map, any}","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_integer_range_type()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_fun_type()","[any()]",seen,env]}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_function_type()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["{type, anno(), 'fun', []}","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_empty_list_type()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_bitstring_type()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,{typechecker,refine,["af_atom()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,
       {typechecker,refine,["af_annotated_type()","[any()]",seen,env]}}
{trace,<0.104.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{user_type,0,type,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,call,{typechecker,refine,["[type()]","[any()]",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{user_type,0,type,[]}}
{trace,<0.104.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.104.0>,call,{typechecker,refine,["{type()}","{type()}",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.104.0>,call,
       {typechecker,refine,
                    ["{atom() | [char()], [type()] | type()}",
                     "{atom() | [char()], [type()] | type()}",seen,env]}}
{trace,<0.104.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.104.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.104.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.105.0>,call,
 {typechecker,type_check_function,
  [{venv,#{}},
   {function,
    {223,1},
    annotate_user_type_,2,
    [{clause,
      {223,1},
      [{var,{223,21},'Filename'},
       {tuple,
        {223,31},
        [{atom,{223,32},user_type},
         {var,{223,43},'Anno'},
         {var,{223,49},'Name'},
         {var,{223,55},'Params'}]}],
      [],
      [{tuple,
        {225,5},
        [{atom,{225,6},user_type},
         {call,
          {225,17},
          {remote,{225,25},{atom,{225,17},erl_anno},{atom,{225,26},set_file}},
          [{var,{225,35},'Filename'},{var,{225,45},'Anno'}]},
         {var,{225,52},'Name'},
         {lc,
          {226,6},
          {call,
           {226,7},
           {atom,{226,7},annotate_user_type_},
           [{var,{226,27},'Filename'},{var,{226,37},'Param'}]},
          [{generate,
            {226,53},
            {var,{226,47},'Param'},
            {var,{226,56},'Params'}}]}]}]},
     {clause,
      {227,1},
      [{var,{227,21},'Filename'},
       {tuple,
        {227,31},
        [{atom,{227,32},type},
         {var,{227,38},'Anno'},
         {atom,{227,44},record},
         {match,
          {227,52},
          {var,{227,52},'RecName'},
          {cons,{227,62},{var,{227,63},'_'},{nil,{227,64}}}}]}],
      [],
      [{tuple,
        {229,5},
        [{atom,{229,6},type},
         {call,
          {229,12},
          {remote,{229,20},{atom,{229,12},erl_anno},{atom,{229,21},set_file}},
          [{var,{229,30},'Filename'},{var,{229,40},'Anno'}]},
         {atom,{229,47},record},
         {var,{229,55},'RecName'}]}]},
     {clause,
      {230,1},
      [{var,{230,21},'Filename'},
       {tuple,
        {230,31},
        [{atom,{230,32},type},
         {var,{230,38},'Anno'},
         {var,{230,44},'T'},
         {var,{230,47},'Params'}]}],
      [[{call,{230,61},{atom,{230,61},is_list},[{var,{230,69},'Params'}]}]],
      [{tuple,
        {231,5},
        [{atom,{231,6},type},
         {var,{231,12},'Anno'},
         {var,{231,18},'T'},
         {lc,
          {231,21},
          {call,
           {231,23},
           {atom,{231,23},annotate_user_types},
           [{var,{231,43},'Filename'},{var,{231,53},'Param'}]},
          [{generate,
            {232,32},
            {var,{232,26},'Param'},
            {call,
             {232,36},
             {atom,{232,36},':::'},
             [{var,{232,48},'Params'},
              {string,{232,48},"[ type ( ) ]"}]}}]}]}]},
     {clause,
      {233,1},
      [{var,{233,21},'Filename'},
       {tuple,
        {233,31},
        [{atom,{233,32},ann_type},
         {var,{233,42},'Anno'},
         {cons,
          {233,48},
          {var,{233,49},'Var'},
          {cons,{233,54},{var,{233,54},'Type'},{nil,{233,58}}}}]}],
      [],
      [{match,
        {235,5},
        {var,{235,5},'Type'},
        {call,
         {235,13},
         {atom,{235,13},':::'},
         [{var,{235,25},'Type'},{string,{235,25},"type ( )"}]}},
       {tuple,
        {236,5},
        [{atom,{236,6},ann_type},
         {var,{236,16},'Anno'},
         {cons,
          {236,22},
          {var,{236,23},'Var'},
          {cons,
           {236,28},
           {call,
            {236,28},
            {atom,{236,28},annotate_user_type_},
            [{var,{236,48},'Filename'},{var,{236,58},'Type'}]},
           {nil,{236,63}}}}]}]},
     {clause,
      {237,1},
      [{var,{237,21},'_Filename'},{var,{237,32},'Type'}],
      [],
      [{var,{238,5},'Type'}]}]}]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{file:filename(), type()}",
                     "{file:filename(),\n           {user_type, anno(), type_name(), [abstract_type()]}}",
                     seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,["file:filename()","file:filename()",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_type_variable()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["op","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","user_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_atom()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{user_type, anno(), type_name(), [abstract_type()]}",
                     seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_variable,[]}]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{remote_type,0,
                           [{atom,{222,27},file},{atom,{222,32},filename},[]]},
              {type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_atom,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_singleton_integer_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_variable,[]}]}]}}
{trace,<0.105.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     "{file:filename(), {type, anno(), record, none()}}",seen,
                     env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,["file:filename()","file:filename()",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable()",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{type, anno(), record, none()}",
                     seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,{typechecker,refine,["union","record",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,{typechecker,refine,["tuple","record",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_character()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type, anno(), record, none()}",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), record, none()}",seen,
                     env]}}
{trace,<0.105.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,{typechecker,refine,["record","record",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["[af_atom() | af_record_field_type()]","none()",seen,
                     env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.105.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     "{file:filename(), {ann_type, anno(), none()}}",seen,
                     env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,["file:filename()","file:filename()",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_type_variable()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.105.0>,call,{typechecker,refine,["var","ann_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["integer","ann_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_character()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["char","ann_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,["remote_type","ann_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_atom()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.105.0>,call,{typechecker,refine,["atom","ann_type",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.105.0>,call,{typechecker,refine,["ann_type","ann_type",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["[af_anno() | abstract_type()]","none()",seen,env]}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.105.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.105.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.105.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.105.0>,call,
       {typechecker,refine,
                    ["{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     "{file:filename(),\n           af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_type_variable()}",
                     seen,env]}}
{trace,<0.105.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.105.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.105.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.106.0>,call,
 {typechecker,type_check_function,
  [{venv,#{}},
   {function,
    {241,1},
    get_module_from_annotation,1,
    [{clause,
      {241,1},
      [{var,{241,28},'Anno'}],
      [],
      [{'case',
        {242,5},
        {call,
         {242,10},
         {remote,{242,18},{atom,{242,10},erl_anno},{atom,{242,19},file}},
         [{var,{242,24},'Anno'}]},
        [{clause,
          {243,9},
          [{var,{243,9},'File'}],
          [[{call,{243,19},{atom,{243,19},is_list},[{var,{243,27},'File'}]}]],
          [{match,
            {244,13},
            {var,{244,13},'Basename'},
            {call,
             {244,24},
             {remote,
              {244,32},
              {atom,{244,24},filename},
              {atom,{244,33},basename}},
             [{var,{244,42},'File'},{string,{244,48},".erl"}]}},
           {tuple,
            {245,13},
            [{atom,{245,14},ok},
             {call,
              {245,18},
              {atom,{245,18},list_to_existing_atom},
              [{call,
                {245,41},
                {atom,{245,41},':::'},
                [{var,{245,53},'Basename'},
                 {string,{245,53},"string ( )"}]}]}]}]},
         {clause,
          {246,9},
          [{atom,{246,9},undefined}],
          [],
          [{atom,{247,13},none}]}]}]}]}]}}
{trace,<0.106.0>,call,
       {typechecker,refine,["filename() | undefined","[any()]",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["filename()","[any()]",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["[char()]","[any()]",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,{typechecker,refine,["<<_:_*8>>","[any()]",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,binary,[{integer,0,0},{integer,0,8}]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,{typechecker,refine,["undefined","[any()]",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{atom,0,undefined},
              {type,0,binary,[{integer,0,0},{integer,0,8}]}]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{undefined | <<_:_*8>>}","{undefined}",seen,env]}}
{trace,<0.106.0>,call,
       {typechecker,refine,["undefined | <<_:_*8>>","undefined",seen,env]}}
{trace,<0.106.0>,call,{typechecker,refine,["<<_:_*8>>","undefined",seen,env]}}
{trace,<0.106.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,call,{typechecker,refine,["undefined","undefined",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,binary,[{integer,0,0},{integer,0,8}]}}
{trace,<0.106.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.106.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,[{type,0,binary,[{integer,0,0},{integer,0,8}]}]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,call,
       {typechecker,refine,
                    ["{erl_anno:anno()}","{erl_anno:anno()}",seen,env]}}
{trace,<0.106.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.106.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.106.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.107.0>,call,
 {typechecker,type_check_function,
  [{venv,#{}},
   {function,
    {252,1},
    substitute_type_vars,2,
    [{clause,
      {252,1},
      [{tuple,
        {252,22},
        [{atom,{252,23},type},
         {var,{252,29},'L'},
         {atom,{252,32},'fun'},
         {cons,
          {252,39},
          {match,
           {252,40},
           {var,{252,40},'Any'},
           {tuple,
            {252,46},
            [{atom,{252,47},type},{var,{252,53},'_'},{atom,{252,56},any}]}},
          {cons,{252,62},{var,{252,62},'RetTy'},{nil,{252,67}}}}]},
       {var,{252,71},'TVars'}],
      [],
      [{match,
        {257,5},
        {var,{257,5},'RetTy'},
        {call,
         {257,14},
         {atom,{257,14},':::'},
         [{var,{257,26},'RetTy'},{string,{257,26},"type ( )"}]}},
       {tuple,
        {258,5},
        [{atom,{258,6},type},
         {var,{258,12},'L'},
         {atom,{258,15},'fun'},
         {cons,
          {258,22},
          {var,{258,23},'Any'},
          {cons,
           {258,28},
           {call,
            {258,28},
            {atom,{258,28},substitute_type_vars},
            [{var,{258,49},'RetTy'},{var,{258,56},'TVars'}]},
           {nil,{258,62}}}}]}]},
     {clause,
      {259,1},
      [{tuple,
        {259,22},
        [{var,{259,23},'Tag'},
         {var,{259,28},'L'},
         {var,{259,31},'T'},
         {var,{259,34},'Params'}]},
       {var,{259,43},'TVars'}],
      [[{op,
         {260,20},
         'orelse',
         {op,{260,12},'==',{var,{260,8},'Tag'},{atom,{260,15},type}},
         {op,{261,12},'==',{var,{261,8},'Tag'},{atom,{261,15},user_type}}},
        {call,{262,8},{atom,{262,8},is_list},[{var,{262,16},'Params'}]}]],
      [{tuple,
        {267,5},
        [{var,{267,6},'Tag'},
         {var,{267,11},'L'},
         {var,{267,14},'T'},
         {lc,
          {267,17},
          {call,
           {267,18},
           {atom,{267,18},substitute_type_vars},
           [{var,{267,39},'P'},{var,{267,42},'TVars'}]},
          [{generate,
            {267,54},
            {var,{267,52},'P'},
            {call,
             {267,58},
             {atom,{267,58},':::'},
             [{var,{267,70},'Params'},{string,{267,70},"list ( )"}]}}]}]}]},
     {clause,
      {268,1},
      [{tuple,
        {268,22},
        [{atom,{268,23},remote_type},
         {var,{268,36},'L'},
         {cons,
          {268,39},
          {var,{268,40},'M'},
          {cons,
           {268,43},
           {var,{268,43},'T'},
           {cons,{268,46},{var,{268,46},'Params'},{nil,{268,52}}}}}]},
       {var,{268,56},'TVars'}],
      [],
      [{tuple,
        {269,5},
        [{atom,{269,6},remote_type},
         {var,{269,19},'L'},
         {cons,
          {269,22},
          {var,{269,23},'M'},
          {cons,
           {269,26},
           {var,{269,26},'T'},
           {cons,
            {269,29},
            {lc,
             {269,29},
             {call,
              {269,30},
              {atom,{269,30},substitute_type_vars},
              [{var,{269,51},'P'},{var,{269,54},'TVars'}]},
             [{generate,{269,66},{var,{269,64},'P'},{var,{269,69},'Params'}}]},
            {nil,{269,76}}}}}]}]},
     {clause,
      {270,1},
      [{tuple,
        {270,22},
        [{atom,{270,23},ann_type},
         {var,{270,33},'L'},
         {cons,
          {270,36},
          {match,
           {270,37},
           {var,{270,37},'Var'},
           {tuple,
            {270,43},
            [{atom,{270,44},var},{var,{270,49},'_'},{var,{270,52},'_'}]}},
          {cons,{270,56},{var,{270,56},'Type'},{nil,{270,60}}}}]},
       {var,{270,64},'TVars'}],
      [],
      [{match,
        {272,5},
        {var,{272,5},'Type'},
        {call,
         {272,13},
         {atom,{272,13},':::'},
         [{var,{272,25},'Type'},{string,{272,25},"type ( )"}]}},
       {tuple,
        {273,5},
        [{atom,{273,6},ann_type},
         {var,{273,16},'L'},
         {cons,
          {273,19},
          {var,{273,20},'Var'},
          {cons,
           {273,25},
           {call,
            {273,25},
            {atom,{273,25},substitute_type_vars},
            [{var,{273,46},'Type'},{var,{273,52},'TVars'}]},
           {nil,{273,58}}}}]}]},
     {clause,
      {274,1},
      [{tuple,
        {274,22},
        [{atom,{274,23},var},{var,{274,28},'L'},{var,{274,31},'Var'}]},
       {var,{274,37},'TVars'}],
      [],
      [{'case',
        {275,5},
        {var,{275,10},'TVars'},
        [{clause,
          {276,9},
          [{map,
            {276,9},
            [{map_field_exact,
              {276,15},
              {var,{276,11},'Var'},
              {var,{276,18},'Type'}}]}],
          [],
          [{var,{276,27},'Type'}]},
         {clause,
          {277,9},
          [{var,{277,9},'_'}],
          [],
          [{tuple,
            {277,27},
            [{atom,{277,28},var},
             {var,{277,33},'L'},
             {var,{277,36},'Var'}]}]}]}]},
     {clause,
      {279,1},
      [{match,
        {279,22},
        {var,{279,22},'Other'},
        {tuple,
         {279,30},
         [{atom,{279,31},type},
          {var,{279,37},'_'},
          {var,{279,40},'T'},
          {atom,{279,43},any}]}},
       {var,{279,49},'_'}],
      [[{op,{280,10},'==',{var,{280,8},'T'},{atom,{280,13},tuple}}],
       [{op,{280,22},'==',{var,{280,20},'T'},{atom,{280,25},map}}]],
      [{var,{281,5},'Other'}]},
     {clause,
      {282,1},
      [{match,
        {282,22},
        {var,{282,22},'Other'},
        {tuple,
         {282,30},
         [{atom,{282,31},op},
          {var,{282,35},'_'},
          {var,{282,38},'_Op'},
          {var,{282,43},'_Arg'}]}},
       {var,{282,50},'_'}],
      [],
      [{var,{284,5},'Other'}]},
     {clause,
      {285,1},
      [{match,
        {285,22},
        {var,{285,22},'Other'},
        {tuple,
         {285,30},
         [{atom,{285,31},op},
          {var,{285,35},'_'},
          {var,{285,38},'_Op'},
          {var,{285,43},'_Arg1'},
          {var,{285,50},'_Arg2'}]}},
       {var,{285,58},'_'}],
      [],
      [{var,{287,5},'Other'}]},
     {clause,
      {288,1},
      [{match,
        {288,22},
        {var,{288,22},'Other'},
        {tuple,
         {288,30},
         [{var,{288,31},'T'},{var,{288,34},'_'},{var,{288,37},'_'}]}},
       {var,{288,41},'_'}],
      [[{op,{289,10},'==',{var,{289,8},'T'},{atom,{289,13},atom}}],
       [{op,{289,21},'==',{var,{289,19},'T'},{atom,{289,24},integer}}],
       [{op,{289,35},'==',{var,{289,33},'T'},{atom,{289,38},char}}]],
      [{var,{290,5},'Other'}]}]}]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{type, anno(), 'fun', none()}, #{atom() => type()}}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["type()","{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{type, anno(), 'fun', none()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["user_type","type",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{type, anno(), 'fun', none()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["union","'fun'",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["tuple","'fun'",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["tuple","'fun'",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["op","type",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_character()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{type, anno(), 'fun', none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{type, anno(), 'fun', none()}",seen,
                     env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["record","'fun'",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{type, anno(), 'fun', none()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","type",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["type_name()","'fun'",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{remote_type, anno(), none()}, #{atom() => type()}}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["type()","{remote_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{remote_type, anno(), none()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{remote_type, anno(), none()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["var","remote_type",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,call,{typechecker,refine,["integer","remote_type",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_character()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,call,{typechecker,refine,["char","remote_type",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{remote_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{remote_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,["remote_type","remote_type",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["[af_atom() | af_atom() | [abstract_type()]]","none()",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{ann_type, anno(), none()}, #{atom() => type()}}",seen,
                     env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,["type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,call,{typechecker,refine,["var","ann_type",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["integer","ann_type",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_character()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["char","ann_type",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,["remote_type","ann_type",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}","{ann_type, anno(), none()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_atom()","{ann_type, anno(), none()}",seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["atom","ann_type",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{ann_type, anno(), none()}",seen,
                     env]}}
{trace,<0.107.0>,call,{typechecker,refine,["ann_type","ann_type",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,{typechecker,refine,["anno()","anno()",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["[af_anno() | abstract_type()]","none()",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.107.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{#{atom() => type()}}","{#{atom() := type()}}",seen,
                     env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() := type()}",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,map,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,[{type,0,map,[]}]}}
{trace,<0.107.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.107.0>,call,{typechecker,refine,["{#{}}","{#{}}",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type(), #{atom() => type()}}",
                     "{{var, anno(), gr_type_var()}, #{atom() => type()}}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["type()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_type_variable()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_type_union()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["gr_integer()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["integer","var",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_character()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.107.0>,call,{typechecker,refine,["char","var",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_singleton_integer_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_remote_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.107.0>,call,{typechecker,refine,["remote_type","var",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_record_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_map_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_fun_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_function_type()","{var, anno(), gr_type_var()}",seen,
                     env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_atom()","{var, anno(), gr_type_var()}",seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["atom","var",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()","{var, anno(), gr_type_var()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["ann_type","var",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_singleton_integer_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]}]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() => type()}",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_atom,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_singleton_integer_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_user_defined_type,[]}]},
              {type,0,map,
                    [{type,0,map_field_assoc,
                           [{type,0,atom,[]},{user_type,0,type,[]}]}]}]}}
{trace,<0.107.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_atom() |\n           af_bitstring_type() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_singleton_integer_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_user_defined_type(),\n           #{atom() => type()}}",
                     "{{op, anno(), unary_op(), af_singleton_integer_type()},\n           #{atom() => type()}}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_bitstring_type() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_singleton_integer_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_user_defined_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["user_type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_singleton_integer_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_unary_op(af_singleton_integer_type())",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         gr_integer,[]}]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,{typechecker,refine,["type","op",seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_atom()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{op, anno(), unary_op(), af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_binary_op,
                         [{user_type,[{file,"gradualizer_type.erl"},
                                      {location,0}],
                                     af_singleton_integer_type,[]}]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         gr_integer,[]}]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() => type()}",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,return_from,
    {typechecker,refine,4},
    {type,0,tuple,
        [{type,0,union,
             [{user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_annotated_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_atom,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_binary_op,
                  [{user_type,
                       [{file,"gradualizer_type.erl"},{location,0}],
                       af_singleton_integer_type,[]}]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_bitstring_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_character,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_constrained_function_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_empty_list_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_integer_range_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_predefined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_record_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_remote_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_type_union,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  af_user_defined_type,[]},
              {user_type,
                  [{file,"gradualizer_type.erl"},{location,0}],
                  gr_integer,[]}]},
         {type,0,map,
             [{type,0,map_field_assoc,
                  [{type,0,atom,[]},{user_type,0,type,[]}]}]}]}}
{trace,<0.107.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{af_annotated_type() |\n           af_atom() |\n           af_binary_op(af_singleton_integer_type()) |\n           af_bitstring_type() |\n           af_character() |\n           af_constrained_function_type() |\n           af_empty_list_type() |\n           af_fun_type() |\n           af_integer_range_type() |\n           af_map_type() |\n           af_predefined_type() |\n           af_record_type() |\n           af_remote_type() |\n           af_tuple_type() |\n           af_type_union() |\n           af_user_defined_type() |\n           gr_integer(),\n           #{atom() => type()}}",
                     "{{op,\n            anno(),\n            binary_op(),\n            af_singleton_integer_type(),\n            af_singleton_integer_type()},\n           #{atom() => type()}}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_annotated_type() |\n          af_atom() |\n          af_binary_op(af_singleton_integer_type()) |\n          af_bitstring_type() |\n          af_character() |\n          af_constrained_function_type() |\n          af_empty_list_type() |\n          af_fun_type() |\n          af_integer_range_type() |\n          af_map_type() |\n          af_predefined_type() |\n          af_record_type() |\n          af_remote_type() |\n          af_tuple_type() |\n          af_type_union() |\n          af_user_defined_type() |\n          gr_integer()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["gr_integer()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_user_defined_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_type_union()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_tuple_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, [abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), tuple, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_tuple_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_remote_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_record_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_predefined_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_map_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, [af_assoc_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), map, any}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_map_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_integer_range_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_fun_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', []}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["{type, anno(), 'fun', [gr_any_fun_args() | abstract_type()]}",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                  af_fun_type,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_empty_list_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_constrained_function_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_character()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_bitstring_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_binary_op(af_singleton_integer_type())",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_atom()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["af_annotated_type()",
                     "{op,\n           anno(),\n           binary_op(),\n           af_singleton_integer_type(),\n           af_singleton_integer_type()}",
                     seen,env]}}
{trace,<0.107.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {type,0,union,
             [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_annotated_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_atom,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_bitstring_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_character,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_constrained_function_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_empty_list_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_fun_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_integer_range_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_map_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_predefined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_record_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_remote_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_tuple_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_type_union,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         af_user_defined_type,[]},
              {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                         gr_integer,[]}]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,call,
       {typechecker,refine,
                    ["#{atom() => type()}","#{atom() => type()}",seen,env]}}
{trace,<0.107.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.107.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.107.0>,return_from,
       {typechecker,refine,4},
       {type,0,tuple,
             [{type,0,union,
                    [{user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_annotated_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_atom,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_bitstring_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_character,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_constrained_function_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_empty_list_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_fun_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_integer_range_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_map_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_predefined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_record_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_remote_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_tuple_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_type_union,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                af_user_defined_type,[]},
                     {user_type,[{file,"gradualizer_type.erl"},{location,0}],
                                gr_integer,[]}]},
              {type,0,map,
                    [{type,0,map_field_assoc,
                           [{type,0,atom,[]},{user_type,0,type,[]}]}]}]}}
{trace,<0.107.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.107.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.108.0>,call,
    {typechecker,type_check_function,
        [{venv,#{}},
         {function,
             {331,1},
             reduce_type,3,
             [{clause,
                  {331,1},
                  [{var,{331,13},'Fun'},
                   {var,{331,18},'Acc'},
                   {var,{331,23},'Type'}],
                  [],
                  [{call,
                       {332,5},
                       {atom,{332,5},reduce},
                       [{var,{332,12},'Fun'},
                        {atom,{332,17},apply},
                        {var,{332,24},'Acc'},
                        {var,{332,29},'Type'}]}]}]}]}}
{trace,<0.108.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_57) ->\n                   {walkable_type(), Acc_typechecker_3529_57}),\n           Acc_typechecker_3529_57,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_57) ->\n                   {walkable_type(), Acc_typechecker_3529_57}),\n           Acc_typechecker_3529_57,\n           walkable_type()}",
                     seen,env]}}
{trace,<0.108.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.108.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.108.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.109.0>,call,
    {typechecker,type_check_function,
        [{venv,#{}},
         {function,
             {338,1},
             reduce,4,
             [{clause,
                  {338,1},
                  [{var,{338,8},'Fun'},
                   {var,{338,13},'_'},
                   {var,{338,16},'Acc'},
                   {match,
                       {338,21},
                       {tuple,
                           {338,21},
                           [{atom,{338,22},atom},
                            {var,{338,30},'_'},
                            {var,{338,33},'_'}]},
                       {var,{338,38},'Ty'}}],
                  [],
                  [{call,
                       {338,58},
                       {var,{338,58},'Fun'},
                       [{var,{338,62},'Ty'},{var,{338,66},'Acc'}]}]},
              {clause,
                  {339,1},
                  [{var,{339,8},'Fun'},
                   {var,{339,13},'_'},
                   {var,{339,16},'Acc'},
                   {match,
                       {339,21},
                       {tuple,
                           {339,21},
                           [{atom,{339,22},type},
                            {var,{339,30},'_Anno'},
                            {var,{339,37},'_Name'},
                            {atom,{339,44},any}]},
                       {var,{339,51},'Ty'}}],
                  [],
                  [{call,
                       {339,58},
                       {var,{339,58},'Fun'},
                       [{var,{339,62},'Ty'},{var,{339,66},'Acc'}]}]},
              {clause,
                  {340,1},
                  [{var,{340,8},'Fun'},
                   {var,{340,13},'_'},
                   {var,{340,16},'Acc'},
                   {match,
                       {340,21},
                       {tuple,
                           {340,21},
                           [{atom,{340,22},integer},
                            {var,{340,33},'_'},
                            {var,{340,36},'_'}]},
                       {var,{340,41},'Ty'}}],
                  [],
                  [{call,
                       {340,58},
                       {var,{340,58},'Fun'},
                       [{var,{340,62},'Ty'},{var,{340,66},'Acc'}]}]},
              {clause,
                  {341,1},
                  [{var,{341,8},'Fun'},
                   {var,{341,13},'_'},
                   {var,{341,16},'Acc'},
                   {match,
                       {341,21},
                       {tuple,
                           {341,21},
                           [{atom,{341,22},char},
                            {var,{341,30},'_'},
                            {var,{341,33},'_'}]},
                       {var,{341,38},'Ty'}}],
                  [],
                  [{call,
                       {341,58},
                       {var,{341,58},'Fun'},
                       [{var,{341,62},'Ty'},{var,{341,66},'Acc'}]}]},
              {clause,
                  {342,1},
                  [{var,{342,8},'Fun'},
                   {var,{342,13},'_'},
                   {var,{342,16},'Acc'},
                   {match,
                       {342,21},
                       {tuple,
                           {342,21},
                           [{atom,{342,22},type},
                            {var,{342,30},'_Anno'},
                            {atom,{342,37},any}]},
                       {var,{342,44},'Ty'}}],
                  [],
                  [{call,
                       {342,58},
                       {var,{342,58},'Fun'},
                       [{var,{342,62},'Ty'},{var,{342,66},'Acc'}]}]},
              {clause,
                  {343,1},
                  [{var,{343,8},'Fun'},
                   {var,{343,13},'_'},
                   {var,{343,16},'Acc'},
                   {match,
                       {343,21},
                       {atom,{343,21},pos_inf},
                       {var,{343,31},'Ty'}}],
                  [],
                  [{call,
                       {343,58},
                       {var,{343,58},'Fun'},
                       [{var,{343,62},'Ty'},{var,{343,66},'Acc'}]}]},
              {clause,
                  {344,1},
                  [{var,{344,8},'Fun'},
                   {var,{344,13},'_'},
                   {var,{344,16},'Acc'},
                   {match,
                       {344,21},
                       {atom,{344,21},neg_inf},
                       {var,{344,31},'Ty'}}],
                  [],
                  [{call,
                       {344,58},
                       {var,{344,58},'Fun'},
                       [{var,{344,62},'Ty'},{var,{344,66},'Acc'}]}]},
              {clause,
                  {345,1},
                  [{var,{345,8},'Fun'},
                   {var,{345,13},'_'},
                   {var,{345,16},'Acc'},
                   {match,
                       {345,21},
                       {tuple,
                           {345,21},
                           [{atom,{345,22},var},
                            {var,{345,27},'_'},
                            {var,{345,30},'_'}]},
                       {var,{345,35},'Ty'}}],
                  [],
                  [{call,
                       {345,58},
                       {var,{345,58},'Fun'},
                       [{var,{345,62},'Ty'},{var,{345,66},'Acc'}]}]},
              {clause,
                  {346,1},
                  [{var,{346,8},'Fun'},
                   {atom,{346,13},apply},
                   {var,{346,20},'Acc'},
                   {var,{346,25},'Ty'}],
                  [],
                  [{match,
                       {347,5},
                       {tuple,
                           {347,5},
                           [{var,{347,6},'NewTy'},{var,{347,13},'Acc1'}]},
                       {call,
                           {347,21},
                           {var,{347,21},'Fun'},
                           [{var,{347,25},'Ty'},{var,{347,29},'Acc'}]}},
                   {call,
                       {348,5},
                       {atom,{348,5},reduce},
                       [{var,{348,12},'Fun'},
                        {atom,{348,17},recurse},
                        {var,{348,26},'Acc1'},
                        {var,{348,32},'NewTy'}]}]},
              {clause,
                  {349,1},
                  [{var,{349,8},'Fun'},
                   {atom,{349,13},recurse},
                   {var,{349,22},'Acc'},
                   {tuple,
                       {349,27},
                       [{atom,{349,28},op},
                        {var,{349,34},'_'},
                        {var,{349,37},'_'},
                        {var,{349,40},'Ty1'}]}],
                  [],
                  [{call,
                       {349,66},
                       {atom,{349,66},reduce_rec},
                       [{var,{349,77},'Fun'},
                        {var,{349,82},'Acc'},
                        {cons,
                            {349,87},
                            {var,{349,88},'Ty1'},
                            {nil,{349,91}}}]}]},
              {clause,
                  {350,1},
                  [{var,{350,8},'Fun'},
                   {atom,{350,13},recurse},
                   {var,{350,22},'Acc'},
                   {tuple,
                       {350,27},
                       [{atom,{350,28},op},
                        {var,{350,34},'_'},
                        {var,{350,37},'_'},
                        {var,{350,40},'Ty1'},
                        {var,{350,45},'Ty2'}]}],
                  [],
                  [{call,
                       {350,66},
                       {atom,{350,66},reduce_rec},
                       [{var,{350,77},'Fun'},
                        {var,{350,82},'Acc'},
                        {cons,
                            {350,87},
                            {var,{350,88},'Ty1'},
                            {cons,
                                {350,93},
                                {var,{350,93},'Ty2'},
                                {nil,{350,96}}}}]}]},
              {clause,
                  {351,1},
                  [{var,{351,8},'Fun'},
                   {atom,{351,13},recurse},
                   {var,{351,22},'Acc'},
                   {tuple,
                       {351,27},
                       [{atom,{351,28},ann_type},
                        {var,{351,40},'_Anno'},
                        {var,{351,47},'Args'}]}],
                  [],
                  [{call,
                       {351,66},
                       {atom,{351,66},reduce_rec},
                       [{var,{351,77},'Fun'},
                        {var,{351,82},'Acc'},
                        {var,{351,87},'Args'}]}]},
              {clause,
                  {352,1},
                  [{var,{352,8},'Fun'},
                   {atom,{352,13},recurse},
                   {var,{352,22},'Acc'},
                   {tuple,
                       {352,27},
                       [{atom,{352,28},type},
                        {var,{352,36},'_Anno'},
                        {var,{352,43},'_Name'},
                        {var,{352,50},'Args'}]}],
                  [],
                  [{call,
                       {352,66},
                       {atom,{352,66},reduce_rec},
                       [{var,{352,77},'Fun'},
                        {var,{352,82},'Acc'},
                        {var,{352,87},'Args'}]}]},
              {clause,
                  {353,1},
                  [{var,{353,8},'Fun'},
                   {atom,{353,13},recurse},
                   {var,{353,22},'Acc'},
                   {tuple,
                       {353,27},
                       [{atom,{353,28},remote_type},
                        {var,{353,43},'_Anno'},
                        {cons,
                            {353,50},
                            {var,{353,51},'M'},
                            {cons,
                                {353,54},
                                {var,{353,54},'T'},
                                {cons,
                                    {353,57},
                                    {var,{353,57},'As'},
                                    {nil,{353,59}}}}}]}],
                  [],
                  [{call,
                       {353,66},
                       {atom,{353,66},reduce_rec},
                       [{var,{353,77},'Fun'},
                        {var,{353,82},'Acc'},
                        {cons,
                            {353,87},
                            {var,{353,88},'M'},
                            {cons,
                                {353,91},
                                {var,{353,91},'T'},
                                {var,{353,95},'As'}}}]}]},
              {clause,
                  {354,1},
                  [{var,{354,8},'Fun'},
                   {atom,{354,13},recurse},
                   {var,{354,22},'Acc'},
                   {tuple,
                       {354,27},
                       [{atom,{354,28},user_type},
                        {var,{354,41},'_Anno'},
                        {var,{354,48},'_Name'},
                        {var,{354,55},'Args'}]}],
                  [],
                  [{call,
                       {354,66},
                       {atom,{354,66},reduce_rec},
                       [{var,{354,77},'Fun'},
                        {var,{354,82},'Acc'},
                        {var,{354,87},'Args'}]}]}]}]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {atom, anno(), atom()}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           none()}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {integer, anno(), integer()}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {char, anno(), char()}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {type, _, any}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59, pos_inf}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59, neg_inf}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           {var, anno(), gr_type_var()}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","apply | recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply, Acc_typechecker_3529_59,\n           walkable_type()}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","apply",seen,env]}}
{trace,<0.109.0>,call,{typechecker,refine,["recurse","apply",seen,env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,call,{typechecker,refine,["apply","apply",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{atom,0,recurse}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {op, anno(), unary_op(), af_singleton_integer_type()}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.109.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {op,\n            anno(),\n            binary_op(),\n            af_singleton_integer_type(),\n            af_singleton_integer_type()}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.109.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {ann_type, anno(), [af_anno() | abstract_type()]}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.109.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           none()}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.109.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {remote_type, anno(), none()}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.109.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           apply | recurse,\n           Acc_typechecker_3529_59,\n           walkable_type()}",
                     "{fun((walkable_type(), Acc_typechecker_3529_59) ->\n                   {walkable_type(), Acc_typechecker_3529_59}),\n           recurse, Acc_typechecker_3529_59,\n           {user_type, anno(), type_name(), [abstract_type()]}}",
                     seen,env]}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     "fun((walkable_type(), Acc_typechecker_3529_59) ->\n                  {walkable_type(), Acc_typechecker_3529_59})",
                     seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,["apply | recurse","recurse",seen,env]}}
{trace,<0.109.0>,call,{typechecker,refine,["recurse","recurse",seen,env]}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,call,{typechecker,refine,["apply","recurse",seen,env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,disjoint}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-fun-6-',5}}
{trace,<0.109.0>,return_from,{typechecker,refine,4},{atom,0,apply}}
{trace,<0.109.0>,return_to,{typechecker,'-refine_ty/4-lc$^12/1-2-',3}}
{trace,<0.109.0>,call,
       {typechecker,refine,
                    ["Acc_typechecker_3529_59","Acc_typechecker_3529_59",seen,
                     env]}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.109.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.109.0>,return_to,{typechecker,type_check_form,5}}
{trace,<0.110.0>,call,
 {typechecker,type_check_function,
  [{venv,#{}},
   {function,
    {356,1},
    reduce_rec,3,
    [{clause,
      {356,1},
      [{var,{356,12},'Fun'},{var,{356,17},'Acc'},{var,{356,22},'Args'}],
      [],
      [{call,
        {357,5},
        {remote,{357,10},{atom,{357,5},lists},{atom,{357,11},foldl}},
        [{'fun',
          {357,17},
          {clauses,
           [{clause,
             {357,21},
             [{var,{357,22},'Arg'},
              {tuple,{357,27},[{var,{357,28},'_'},{var,{357,31},'Acc1'}]}],
             [],
             [{call,
               {358,25},
               {atom,{358,25},reduce},
               [{var,{358,32},'Fun'},
                {atom,{358,37},apply},
                {var,{358,44},'Acc1'},
                {var,{358,50},'Arg'}]}]}]}},
         {tuple,{359,22},[{atom,{359,23},ok},{var,{359,27},'Acc'}]},
         {var,{359,33},'Args'}]}]}]}]}}
{trace,<0.110.0>,call,
       {typechecker,refine,
                    ["{T_typechecker_3529_61, Acc_typechecker_3529_62}",
                     "{T_typechecker_3529_61,\n           {Acc_typechecker_3529_62_typechecker_1257_63,\n            Acc_typechecker_3529_62_typechecker_1257_64}}",
                     seen,env]}}
{trace,<0.110.0>,call,
       {typechecker,refine,
                    ["T_typechecker_3529_61","T_typechecker_3529_61",seen,
                     env]}}
{trace,<0.110.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.110.0>,exception_from,{typechecker,refine,4},{throw,no_refinement}}
{trace,<0.110.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.110.0>,call,
       {typechecker,refine,
                    ["{any(), any(), any()}","{any(), any(), any()}",seen,
                     env]}}
{trace,<0.110.0>,return_from,{typechecker,refine,4},{type,0,none,[]}}
{trace,<0.110.0>,return_to,{typechecker,type_diff,3}}
{trace,<0.110.0>,return_to,{typechecker,type_check_form,5}}
src/typelib.erl: Nonexhaustive patterns on line 114 at column 1
Example values which are not covered:
	{type, Opaque2, binary, []}
